"use client"

import { useMemo } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Alert, AlertDescription } from "@/components/ui/alert"
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
  BarChart,
  Bar,
  Cell,
} from "recharts"
import { Shield, AlertTriangle, CheckCircle2, TrendingUp } from "lucide-react"
import type { CalculationResult } from "@/lib/enhanced-tco-calculator"

interface SecurityVulnerabilityTimelineProps {
  results: CalculationResult[]
}

export function SecurityVulnerabilityTimeline({ results }: SecurityVulnerabilityTimelineProps) {
  // Mock historical CVE data for demonstration
  const historicalCVEData = useMemo(() => {
    const years = ["2020", "2021", "2022", "2023", "2024"]
    const vendorCVEHistory: Record<string, number[]> = {
      cisco: [15, 18, 22, 19, 16],
      aruba: [8, 12, 9, 11, 7],
      forescout: [5, 8, 12, 6, 4],
      juniper: [3, 4, 2, 5, 3],
      extreme: [4, 6, 3, 5, 2],
      fortinet: [7, 9, 11, 8, 6],
      arista: [2, 1, 3, 2, 1],
      meraki: [3, 5, 4, 6, 3],
      ivanti: [12, 18, 25, 22, 28],
      microsoft: [8, 12, 15, 11, 9],
      foxpass: [1, 0, 2, 1, 0],
      securew2: [0, 1, 0, 1, 0],
      packetfence: [3, 4, 2, 5, 3],
      portnox: [0, 0, 0, 0, 0],
    }

    return years.map((year) => {
      const yearData: any = { year }
      results.forEach((result) => {
        const vendorId = result.vendorId
        yearData[result.vendorName] = vendorCVEHistory[vendorId] || [0, 0, 0, 0, 0]
        yearData[`${result.vendorName}_value`] = vendorCVEHistory[vendorId]?.[years.indexOf(year)] || 0
      })
      return yearData
    })
  }, [results])

  const securityMetrics = useMemo(() => {
    return results
      .map((result) => ({
        vendor: result.vendorName,
        vendorId: result.vendorId,
        securityScore: result.risk.securityScore,
        cveCount: result.vendorData.security.cveCount,
        zeroTrustMaturity: result.vendorData.security.zeroTrustMaturity,
        lastCVE: result.vendorData.security.lastCVE,
        breachHistory: result.vendorData.security.breachHistory?.incidents || 0,
        isPortnox: result.vendorId === "portnox",
        riskLevel:
          result.vendorData.security.cveCount === 0
            ? "Minimal"
            : result.vendorData.security.cveCount < 10
              ? "Low"
              : result.vendorData.security.cveCount < 25
                ? "Medium"
                : "High",
      }))
      .sort((a, b) => b.securityScore - a.securityScore)
  }, [results])

  const riskDistribution = useMemo(() => {
    const distribution = securityMetrics.reduce(
      (acc, vendor) => {
        acc[vendor.riskLevel] = (acc[vendor.riskLevel] || 0) + 1
        return acc
      },
      {} as Record<string, number>,
    )

    return Object.entries(distribution).map(([level, count]) => ({
      level,
      count,
      color: level === "Minimal" ? "#10b981" : level === "Low" ? "#3b82f6" : level === "Medium" ? "#f59e0b" : "#ef4444",
    }))
  }, [securityMetrics])

  const getSecurityScoreColor = (score: number) => {
    if (score >= 90) return "text-green-600"
    if (score >= 80) return "text-blue-600"
    if (score >= 70) return "text-yellow-600"
    return "text-red-600"
  }

  const getRiskBadgeVariant = (riskLevel: string) => {
    switch (riskLevel) {
      case "Minimal":
        return "default"
      case "Low":
        return "secondary"
      case "Medium":
        return "outline"
      case "High":
        return "destructive"
      default:
        return "outline"
    }
  }

  return (
    <div className="space-y-6">
      {/* Security Overview Cards */}
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
        <Card className="border-green-200 bg-gradient-to-br from-green-50 to-emerald-50">
          <CardHeader className="pb-3">
            <CardTitle className="text-sm font-medium flex items-center gap-2">
              <CheckCircle2 className="h-4 w-4 text-green-600" />
              Zero CVE Vendors
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-green-700">
              {securityMetrics.filter((v) => v.cveCount === 0).length}
            </div>
            <p className="text-xs text-green-600 mt-1">Perfect security record</p>
          </CardContent>
        </Card>

        <Card className="border-red-200 bg-gradient-to-br from-red-50 to-rose-50">
          <CardHeader className="pb-3">
            <CardTitle className="text-sm font-medium flex items-center gap-2">
              <AlertTriangle className="h-4 w-4 text-red-600" />
              High Risk Vendors
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-red-700">
              {securityMetrics.filter((v) => v.riskLevel === "High").length}
            </div>
            <p className="text-xs text-red-600 mt-1">25+ CVEs recorded</p>
          </CardContent>
        </Card>

        <Card className="border-blue-200 bg-gradient-to-br from-blue-50 to-cyan-50">
          <CardHeader className="pb-3">
            <CardTitle className="text-sm font-medium flex items-center gap-2">
              <Shield className="h-4 w-4 text-blue-600" />
              Average Security Score
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-blue-700">
              {(securityMetrics.reduce((sum, v) => sum + v.securityScore, 0) / securityMetrics.length).toFixed(0)}
            </div>
            <p className="text-xs text-blue-600 mt-1">Market average rating</p>
          </CardContent>
        </Card>

        <Card className="border-purple-200 bg-gradient-to-br from-purple-50 to-violet-50">
          <CardHeader className="pb-3">
            <CardTitle className="text-sm font-medium flex items-center gap-2">
              <TrendingUp className="h-4 w-4 text-purple-600" />
              Zero Trust Leaders
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-purple-700">
              {securityMetrics.filter((v) => v.zeroTrustMaturity >= 80).length}
            </div>
            <p className="text-xs text-purple-600 mt-1">80%+ Zero Trust maturity</p>
          </CardContent>
        </Card>
      </div>

      {/* CVE Timeline Chart */}
      <Card>
        <CardHeader>
          <CardTitle>Security Vulnerability Timeline (2020-2024)</CardTitle>
          <CardDescription>Historical CVE count by vendor showing security track record</CardDescription>
        </CardHeader>
        <CardContent>
          <ResponsiveContainer width="100%" height={400}>
            <LineChart data={historicalCVEData}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="year" />
              <YAxis />
              <Tooltip />
              <Legend />
              {results.map((result, index) => (
                <Line
                  key={result.vendorId}
                  type="monotone"
                  dataKey={`${result.vendorName}_value`}
                  stroke={
                    result.vendorId === "portnox" ? "#10b981" : `hsl(${(index * 360) / results.length}, 70%, 50%)`
                  }
                  strokeWidth={result.vendorId === "portnox" ? 4 : 2}
                  name={result.vendorName}
                />
              ))}
            </LineChart>
          </ResponsiveContainer>
        </CardContent>
      </Card>

      {/* Security Risk Distribution */}
      <div className="grid gap-6 lg:grid-cols-2">
        <Card>
          <CardHeader>
            <CardTitle>Security Risk Distribution</CardTitle>
            <CardDescription>Vendor distribution by risk level</CardDescription>
          </CardHeader>
          <CardContent>
            <ResponsiveContainer width="100%" height={300}>
              <BarChart data={riskDistribution}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="level" />
                <YAxis />
                <Tooltip />
                <Bar dataKey="count" radius={[4, 4, 0, 0]}>
                  {riskDistribution.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={entry.color} />
                  ))}
                </Bar>
              </BarChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Security Metrics Comparison</CardTitle>
            <CardDescription>Detailed security analysis by vendor</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4 max-h-80 overflow-y-auto">
              {securityMetrics.map((vendor) => (
                <div
                  key={vendor.vendorId}
                  className={`p-3 rounded-lg border ${
                    vendor.isPortnox
                      ? "border-green-200 bg-green-50 dark:bg-green-950/20"
                      : "border-gray-200 bg-gray-50 dark:bg-gray-950/20"
                  }`}
                >
                  <div className="flex items-center justify-between mb-2">
                    <span className="font-medium text-sm">{vendor.vendor}</span>
                    <Badge variant={getRiskBadgeVariant(vendor.riskLevel)}>{vendor.riskLevel} Risk</Badge>
                  </div>
                  <div className="grid grid-cols-2 gap-4 text-xs">
                    <div>
                      <div className={`font-bold ${getSecurityScoreColor(vendor.securityScore)}`}>
                        {vendor.securityScore}% Security Score
                      </div>
                      <div className="text-muted-foreground">{vendor.cveCount} Total CVEs</div>
                    </div>
                    <div>
                      <div className="font-bold text-blue-600">{vendor.zeroTrustMaturity}% Zero Trust</div>
                      <div className="text-muted-foreground">
                        Last CVE: {vendor.lastCVE === "Never" ? "Never" : vendor.lastCVE}
                      </div>
                    </div>
                  </div>
                  {vendor.isPortnox && (
                    <div className="mt-2 flex items-center gap-1">
                      <CheckCircle2 className="h-3 w-3 text-green-600" />
                      <span className="text-xs text-green-600 font-medium">Perfect Security Record</span>
                    </div>
                  )}
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Security Alerts */}
      <div className="space-y-4">
        {securityMetrics.some((v) => v.riskLevel === "High") && (
          <Alert className="border-red-200 bg-red-50 dark:bg-red-950/20">
            <AlertTriangle className="h-4 w-4" />
            <AlertDescription className="text-red-800 dark:text-red-200">
              <strong>High Risk Alert:</strong> {securityMetrics.filter((v) => v.riskLevel === "High").length} vendor(s)
              have 25+ CVEs and pose significant security risks. Consider immediate migration to more secure
              alternatives.
            </AlertDescription>
          </Alert>
        )}

        {securityMetrics.some((v) => v.cveCount === 0) && (
          <Alert className="border-green-200 bg-green-50 dark:bg-green-950/20">
            <CheckCircle2 className="h-4 w-4" />
            <AlertDescription className="text-green-800 dark:text-green-200">
              <strong>Security Excellence:</strong> Portnox CLEAR maintains a perfect security record with zero CVEs
              since inception, demonstrating superior security architecture and development practices.
            </AlertDescription>
          </Alert>
        )}
      </div>
    </div>
  )
}
