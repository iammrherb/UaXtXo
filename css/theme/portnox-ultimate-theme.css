/* Portnox Ultimate Theme CSS */
:root {
    --ultimate-primary-color: #0072CE; /* Portnox Blue */
    --ultimate-secondary-color: #00D4AA; /* Portnox Teal */
    --ultimate-accent-color: #F5A623; /* Orange Accent */
    --ultimate-bg-color: #F4F7FC; /* Light Grey Background */
    --ultimate-text-color: #333;
    --ultimate-header-bg: #FFFFFF;
    --ultimate-sidebar-bg: #1E293B; /* Dark Blue/Grey */
    --ultimate-sidebar-text: #E2E8F0; /* Light Grey Text */
    --ultimate-sidebar-active-bg: var(--ultimate-primary-color);
    --ultimate-card-bg: #FFFFFF;
    --ultimate-border-color: #E2E8F0;
    --ultimate-font-family: 'Roboto', sans-serif;
    --ultimate-box-shadow: 0 4px 12px rgba(0,0,0,0.08);
}

body {
    font-family: var(--ultimate-font-family);
    color: var(--ultimate-text-color);
    background-color: var(--ultimate-bg-color);
    margin: 0;
    line-height: 1.6;
}

.ultimate-platform-layout {
    display: grid;
    grid-template-columns: 260px 1fr; /* Sidebar and main content */
    grid-template-rows: auto 1fr auto; /* Header, content, footer */
    grid-template-areas:
        "header header"
        "sidebar main"
        "sidebar footer";
    min-height: 100vh;
}

.ultimate-header {
    grid-area: header;
    background-color: var(--ultimate-header-bg);
    padding: 1rem 2rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-bottom: 1px solid var(--ultimate-border-color);
    box-shadow: var(--ultimate-box-shadow);
}

.ultimate-logo {
    height: 40px;
    margin-right: 1rem;
}

.ultimate-header h1 {
    font-size: 1.5rem;
    color: var(--ultimate-primary-color);
    margin: 0;
}

.ultimate-sidebar {
    grid-area: sidebar;
    background-color: var(--ultimate-sidebar-bg);
    color: var(--ultimate-sidebar-text);
    padding: 1.5rem 0;
    display: flex;
    flex-direction: column;
}

.ultimate-nav {
    display: flex;
    flex-direction: column;
    flex-grow: 1;
}

.nav-tab-ultimate {
    display: flex;
    align-items: center;
    padding: 0.9rem 1.5rem;
    color: var(--ultimate-sidebar-text);
    text-decoration: none;
    font-size: 0.95rem;
    transition: background-color 0.2s ease, color 0.2s ease;
    border-left: 3px solid transparent;
}

.nav-tab-ultimate i {
    margin-right: 0.8rem;
    width: 20px; /* Icon alignment */
}

.nav-tab-ultimate:hover {
    background-color: rgba(255,255,255,0.05);
    border-left-color: var(--ultimate-secondary-color);
}

.nav-tab-ultimate.active {
    background-color: var(--ultimate-sidebar-active-bg);
    color: #FFF;
    font-weight: 600;
    border-left-color: var(--ultimate-secondary-color);
}

.ultimate-config-summary {
    padding: 1rem 1.5rem;
    border-top: 1px solid #3B526F; /* Darker border in sidebar */
}
.ultimate-config-summary h4 {
    color: var(--ultimate-secondary-color);
    margin-top: 0;
    margin-bottom: 0.5rem;
}
.ultimate-config-summary p {
    font-size: 0.85rem;
    margin-bottom: 0.3rem;
    opacity: 0.8;
}


.ultimate-main-content {
    grid-area: main;
    padding: 2rem;
    overflow-y: auto; /* Scroll for content */
}
.ultimate-view-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
    padding-bottom: 1rem;
    border-bottom: 1px solid var(--ultimate-border-color);
}
.ultimate-view-header h2 {
    margin: 0;
    font-size: 1.8rem;
    color: var(--ultimate-primary-color);
}


.ultimate-footer {
    grid-area: footer;
    padding: 1rem 2rem;
    text-align: center;
    font-size: 0.85rem;
    color: #666;
    border-top: 1px solid var(--ultimate-border-color);
    background-color: var(--ultimate-header-bg); /* Consistent with header */
}

/* Buttons */
.btn-ultimate {
    padding: 0.6rem 1.2rem;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 0.9rem;
    transition: background-color 0.2s ease, box-shadow 0.2s ease;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
}
.btn-ultimate i {
    margin-right: 0.5rem;
}

.btn-ultimate.primary {
    background-color: var(--ultimate-primary-color);
    color: white;
}
.btn-ultimate.primary:hover {
    background-color: #005bb5; /* Darker primary */
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

.btn-ultimate.secondary {
    background-color: var(--ultimate-secondary-color);
    color: white;
}
.btn-ultimate.secondary:hover {
    background-color: #00bfa5; /* Darker secondary */
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}
.btn-ultimate.full-width {
    width: 100%;
    justify-content: center;
}


/* Forms */
.form-input-ultimate, .form-select-ultimate {
    width: 100%;
    padding: 0.7rem;
    border: 1px solid var(--ultimate-border-color);
    border-radius: 4px;
    font-size: 0.9rem;
    box-sizing: border-box;
}
.ultimate-form-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
    margin-bottom: 1rem;
}
.form-group { margin-bottom: 1rem; }
.form-group label { display: block; margin-bottom: .3rem; font-weight: 500; }

.ultimate-checkbox-group {
    display: flex;
    flex-wrap: wrap;
    gap: 0.8rem;
}
.ultimate-checkbox-group label {
    display: flex;
    align-items: center;
    cursor: pointer;
}
.ultimate-checkbox-group input[type="checkbox"] {
    margin-right: 0.4rem;
    accent-color: var(--ultimate-primary-color);
}


/* Cards */
.ultimate-card {
    background-color: var(--ultimate-card-bg);
    border-radius: 8px;
    padding: 1.5rem;
    box-shadow: var(--ultimate-box-shadow);
    transition: transform 0.2s ease, box-shadow 0.2s ease;
}
.ultimate-card:hover {
    transform: translateY(-3px);
    box-shadow: 0 6px 16px rgba(0,0,0,0.1);
}

/* Modal */
.ultimate-modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0,0,0,0.5);
    animation: fadeInModal 0.3s ease-out;
}
@keyframes fadeInModal { from { opacity: 0; } to { opacity: 1; } }

.ultimate-modal-content {
    background-color: #fff;
    margin: 10% auto;
    padding: 2rem;
    border: 1px solid var(--ultimate-border-color);
    width: 80%;
    max-width: 700px;
    border-radius: 8px;
    box-shadow: 0 10px 30px rgba(0,0,0,0.15);
    position: relative;
}

.ultimate-modal-close {
    color: #aaa;
    float: right;
    font-size: 28px;
    font-weight: bold;
    position: absolute;
    top: 10px;
    right: 20px;
}
.ultimate-modal-close:hover,
.ultimate-modal-close:focus {
    color: var(--ultimate-text-color);
    text-decoration: none;
    cursor: pointer;
}

/* Data Table (for comparison view, etc.) */
.data-table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 1rem;
    background-color: white;
    box-shadow: var(--ultimate-box-shadow);
    border-radius: 6px;
    overflow: hidden; /* For rounded corners on table */
}
.data-table th, .data-table td {
    padding: 0.9rem 1rem;
    text-align: left;
    border-bottom: 1px solid var(--ultimate-border-color);
}
.data-table th {
    background-color: #f8f9fa; /* Light grey header */
    font-weight: 600;
    color: var(--ultimate-primary-color);
}
.data-table tbody tr:last-child td {
    border-bottom: none;
}
.data-table tbody tr:hover {
    background-color: #f1f3f5; /* Light hover effect */
}

/* Chart container styling */
.chart-container {
    padding: 1rem;
    background-color: var(--ultimate-card-bg);
    border-radius: 6px;
    box-shadow: var(--ultimate-box-shadow);
    margin-bottom: 1.5rem;
}
.charts-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1.5rem;
}

/* Loading overlay */
.ultimate-loading-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(255, 255, 255, 0.7);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 9999;
}
.ultimate-spinner {
    border: 5px solid var(--ultimate-bg-color);
    border-top: 5px solid var(--ultimate-primary-color);
    border-radius: 50%;
    width: 50px;
    height: 50px;
    animation: spin 1s linear infinite;
}
@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}
.ultimate-content-area.loading-state {
    opacity: 0.5;
    pointer-events: none;
}
.ultimate-error-message {
    padding: 2rem;
    text-align: center;
    font-size: 1.2rem;
    color: #D8000C; /* Error red */
    background-color: #FFD2D2; /* Light red background */
    border: 1px solid #D8000C;
    border-radius: 6px;
}

/* Responsive adjustments */
@media (max-width: 768px) {
    .ultimate-platform-layout {
        grid-template-columns: 1fr; /* Stack sidebar and main */
        grid-template-rows: auto auto 1fr auto; /* Header, sidebar, content, footer */
        grid-template-areas:
            "header"
            "sidebar"
            "main"
            "footer";
    }
    .ultimate-sidebar {
        padding: 0.5rem 0;
        /* Could be made collapsible with JS */
    }
    .ultimate-nav {
        flex-direction: row; /* Horizontal scroll for nav on mobile */
        overflow-x: auto;
        padding: 0.5rem;
        border-bottom: 1px solid #3B526F;
    }
    .nav-tab-ultimate {
        padding: 0.7rem 1rem;
        border-left: none;
        border-bottom: 3px solid transparent;
    }
    .nav-tab-ultimate:hover, .nav-tab-ultimate.active {
        border-left: none;
        border-bottom-color: var(--ultimate-secondary-color);
    }
    .ultimate-header {
        flex-direction: column;
        align-items: flex-start;
        padding: 0.8rem 1rem;
    }
    .ultimate-header h1 { font-size: 1.3rem; }
    .ultimate-header-actions { margin-top: 0.5rem; }
    .ultimate-main-content { padding: 1rem; }
    .ultimate-view-header h2 { font-size: 1.5rem; }
    .charts-grid { grid-template-columns: 1fr; } /* Stack charts on mobile */
}

/* FontAwesome (ensure it's loaded in index.html) */
@import url("https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css");

/* Roboto Font */
@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap');

```
css/theme/portnox-ultimate-theme.css
/**
 * Ultimate Platform - TCO Analyzer Core
 * New architecture for enhanced performance and modularity
 */
class UltimatePlatform {
    constructor(configManager, eventSystem, uiManager) {
        this.configManager = configManager;
        this.eventSystem = eventSystem;
        this.uiManager = uiManager;

        this.currentView = null;
        this.results = {};
        this.config = this.configManager.get('defaults') || {
            devices: 2500,
            users: 1500,
            years: 3,
            industry: 'technology',
            complianceFrameworks: ['SOC 2', 'ISO 27001', 'HIPAA'],
            selectedVendors: ['portnox', 'cisco', 'aruba']
        };
        this.vendorDatabase = window.MasterVendorDatabase; // Using the new master database

        this.views = {}; // To store view instances

        console.log('UltimatePlatform initialized with new architecture.');
        this.eventSystem.on('config:updated', (newConfig) => this.handleConfigUpdate(newConfig));
    }

    init() {
        this.uiManager.renderBaseLayout(this);
        this.uiManager.updateNav(this.currentView);
        this.loadInitialData(); // Load data necessary for the platform (e.g., vendor data)
        this.registerViews(); // Register all view modules
        this.showView(this.configManager.get('defaultView') || 'dashboard');
        this.attachGlobalEventHandlers();
        console.log('UltimatePlatform UI rendered and initialized.');
    }

    attachGlobalEventHandlers() {
        // Example: Handle clicks on nav items
        document.addEventListener('click', (event) => {
            const navTab = event.target.closest('.nav-tab-ultimate');
            if (navTab && navTab.dataset.view) {
                event.preventDefault();
                this.showView(navTab.dataset.view);
            }
        });
         // Listen for vendor selection changes from VendorSelectionView
        this.eventSystem.on('vendors:selected', (selectedVendorIds) => {
            this.config.selectedVendors = selectedVendorIds;
            this.configManager.set('selectedVendors', selectedVendorIds); // Save to config
            this.recalculateAndRefresh();
        });

        // Listen for config changes from UI controls (managed by UIManager)
        // UIManager will emit 'config:control:changed' which is handled by ConfigManager,
        // which then emits 'config:updated' if there's a change, which this platform handles.
    }

    handleConfigUpdate(newConfig) {
        this.config = { ...this.config, ...newConfig }; // Merge new config changes
        console.log('Platform config updated:', this.config);
        this.recalculateAndRefresh();
    }

    recalculateAndRefresh() {
        this.calculateAll();
        if (this.currentView && this.views[this.currentView] && this.views[this.currentView].update) {
            this.views[this.currentView].update(this.results, this.config);
        } else if (this.currentView) {
            this.showView(this.currentView); // Fallback to full re-render if update is not available
        }
    }

    registerViews() {
        // Dynamically register views available in the window scope
        const viewConstructors = {
            DashboardView,
            FinancialAnalysisView,
            RiskSecurityView,
            ComplianceViewEnhanced, // Keep existing name if class is the same
            OperationalImpact,
            ComparisonView, // This might be a method within UltimatePlatform or a separate class
            StrategicInsights,
            ExecutiveSummaryView,
            VendorSelectionView // New view for vendor selection
        };

        for (const viewName in viewConstructors) {
            if (typeof viewConstructors[viewName] === 'function') {
                // Map view name to a key used in showView (e.g., DashboardView -> 'dashboard')
                const viewKey = viewName.replace('View', '').toLowerCase();
                if (viewKey === 'complianceenhanced') { // specific handling for compliance view key
                     this.views['compliance'] = new viewConstructors[viewName](this);
                } else {
                    this.views[viewKey] = new viewConstructors[viewName](this);
                }
                console.log(`View registered: ${viewKey}`);
            }
        }
        // Special case for Comparison view if it's part of the platform class
        if (typeof this.renderComparison === 'function') {
             this.views['comparison'] = { render: this.renderComparison.bind(this), initCharts: this.initializeComparisonCharts.bind(this) };
        }
    }

    loadInitialData() {
        // In a real app, this might fetch data. Here, it's pre-loaded.
        if (!this.vendorDatabase) {
            console.error("MasterVendorDatabase is not loaded!");
            this.uiManager.showError("Critical Error: Vendor database not found.");
            return;
        }
        console.log(`Loaded data for ${Object.keys(this.vendorDatabase).length} vendors.`);
    }

    calculateAll() {
        this.results = {};
        if (!this.vendorDatabase) {
            console.error("Cannot calculate: MasterVendorDatabase is not loaded.");
            return;
        }
        this.config.selectedVendors.forEach(vendorId => {
            const vendor = this.vendorDatabase[vendorId];
            if (!vendor) {
                console.warn(`Vendor data for ${vendorId} not found. Skipping calculations.`);
                return;
            }
            // Simplified calculations for brevity, referencing more complex logic as needed
            this.results[vendorId] = {
                vendor: vendor,
                tco: this.calculateTCO(vendor),
                roi: this.calculateROI(vendor, this.results[vendorId]?.tco),
                riskScore: this.calculateRiskScore(vendor),
                complianceScore: this.calculateComplianceScore(vendor),
                operationalImpact: this.calculateOperationalImpact(vendor),
                overallScore: 0 // Placeholder for now
            };
            // Calculate overall score based on other metrics
            this.results[vendorId].overallScore = this.calculateOverallVendorScore(this.results[vendorId]);
        });
        console.log('Calculations complete for selected vendors:', this.results);
        this.eventSystem.emit('calculation:complete', this.results);
    }

    calculateOverallVendorScore(vendorResult) {
        // Example weighted scoring
        const weights = { tco: 0.2, roi: 0.2, risk: 0.25, compliance: 0.2, operational: 0.15 };
        let score = 0;

        // Normalize TCO (lower is better) - very simplified
        const maxTco = 2000000; // Assume a max TCO for normalization
        score += ((maxTco - (vendorResult.tco?.total || maxTco)) / maxTco) * 100 * weights.tco;

        score += (vendorResult.roi?.percentage || 0) * weights.roi; // ROI percentage directly
        score += (100 - (vendorResult.riskScore?.score || 100)) * weights.risk; // Lower risk is better
        score += (vendorResult.complianceScore?.overall || 0) * weights.compliance;
        score += (vendorResult.operationalImpact?.efficiencyGain || 0) * weights.operational; // Assuming efficiency 0-100

        return Math.max(0, Math.min(100, Math.round(score)));
    }


    showView(viewKey) {
        console.log(`Attempting to show view: ${viewKey}`);
        if (this.currentView === viewKey && this.uiManager.isContentLoaded()) {
            console.log(`View ${viewKey} is already active and content loaded.`);
            return;
        }

        const viewInstance = this.views[viewKey];
        if (viewInstance && typeof viewInstance.render === 'function') {
            this.uiManager.setLoading(true);

            // Pass results and config to the view's render method
            // The view itself will decide what to do with this data
            viewInstance.render(this.uiManager.getContentArea(), this.results, this.config);

            if (typeof viewInstance.initCharts === 'function') {
                 setTimeout(() => viewInstance.initCharts(this.results, this.config), 100);
            } else if (typeof viewInstance.initializeCharts === 'function') { // For views like FinancialAnalysisView
                 setTimeout(() => viewInstance.initializeCharts(this.results, this.config), 100);
            } else if (typeof viewInstance.initializeExecutiveCharts === 'function') { // For ExecutiveSummaryView
                 setTimeout(() => viewInstance.initializeExecutiveCharts(this.results, this.config), 100);
            }


            this.currentView = viewKey;
            this.uiManager.updateNav(viewKey);
            this.configManager.set('lastView', viewKey);
            this.eventSystem.emit('view:changed', viewKey);
            this.uiManager.setLoading(false);
            console.log(`View ${viewKey} shown successfully.`);
        } else {
            console.error(`View ${viewKey} not found or has no render method.`);
            this.uiManager.showError(`View "${viewKey}" is not available.`);
            this.uiManager.setLoading(false);
        }
    }

    // Placeholder for calculation methods - these would be complex
    calculateTCO(vendor) { /* ... complex TCO logic ... */ return { total: Math.random() * 100000 + 50000, perDevicePerMonth: Math.random()*10+5 }; }
    calculateROI(vendor, tco) { /* ... complex ROI logic ... */ return { percentage: Math.random() * 300 + 50, paybackMonths: Math.floor(Math.random()*18)+6 }; }
    calculateRiskScore(vendor) { /* ... complex risk logic ... */ return { score: Math.floor(Math.random() * 60) + 10, level: 'Medium' }; }
    calculateComplianceScore(vendor) { /* ... complex compliance logic ... */ return { overall: Math.floor(Math.random() * 50) + 50, frameworks: {} }; }
    calculateOperationalImpact(vendor) { /* ... complex op impact logic ... */ return { fteSavings: Math.random() * 2 + 0.5, automationLevel: Math.random()*50+50 }; }

    // Methods for comparison view (if kept as part of platform)
    renderComparison(container) {
        // Simplified version of existing comparison logic
        if (!this.results || Object.keys(this.results).length === 0 || !this.config.selectedVendors || this.config.selectedVendors.length === 0) {
            container.innerHTML = '<p>Select vendors and calculate to see comparison.</p>';
            return;
        }
        let html = '<h3>Feature Comparison</h3><table class="data-table"><thead><tr><th>Feature</th>';
        this.config.selectedVendors.forEach(id => {
            html += `<th>${this.results[id]?.vendor?.name || id}</th>`;
        });
        html += '</tr></thead><tbody>';
        // Example features
        const features = ['802.1X Authentication', 'Cloud Managed', 'AI Threat Detection'];
        features.forEach(f => {
            html += `<tr><td>${f}</td>`;
            this.config.selectedVendors.forEach(id => {
                const vendor = this.results[id]?.vendor;
                const hasFeature = vendor?.features?.core?.[f] || vendor?.features?.security?.[f] || vendor?.deployment?.[f.replace(' ', '').toLowerCase()];
                html += `<td>${hasFeature ? 'Yes' : 'No'}</td>`;
            });
            html += '</tr>';
        });
        html += '</tbody></table><canvas id="ultimate-comparison-radar-chart" height="300"></canvas>';
        container.innerHTML = html;
    }

    initializeComparisonCharts() {
        const ctx = document.getElementById('ultimate-comparison-radar-chart')?.getContext('2d');
        if (!ctx || !this.results || Object.keys(this.results).length === 0) return;

        const labels = ['Security', 'Automation', 'Deployment', 'Compliance']; // Simplified
        const datasets = this.config.selectedVendors.map((vendorId, index) => {
            const vendorResult = this.results[vendorId];
            const vendorData = vendorResult?.vendor;
            if (!vendorData) return { label: vendorId, data: [0,0,0,0] };

            const data = [
                (100 - (vendorResult.riskScore?.score || 100)) / 20, // Max 5
                (vendorResult.operationalImpact?.automationLevel || 0) / 20, // Max 5
                vendorData.deployment?.model === 'Cloud' ? 5 : 2.5,
                (vendorResult.complianceScore?.overall || 0) / 20 // Max 5
            ];
            const colors = [ 'rgba(0, 212, 170, 0.4)', 'rgba(255, 107, 53, 0.4)', 'rgba(59, 130, 246, 0.4)' ];
            return {
                label: vendorData.name,
                data: data,
                backgroundColor: colors[index % colors.length],
                borderColor: colors[index % colors.length].replace('0.4', '1'),
                borderWidth: 1
            };
        });

        if (window.ultimateComparisonRadar) window.ultimateComparisonRadar.destroy();
        window.ultimateComparisonRadar = new Chart(ctx, {
            type: 'radar',
            data: { labels, datasets },
            options: { scales: { r: { angleLines: { display: false }, suggestedMin: 0, suggestedMax: 5 } } }
        });
    }
}

// Helper for UIManager (could be in a separate file)
class UltimateUIManager {
    constructor(eventSystem) {
        this.appContainer = document.getElementById('app-ultimate');
        this.navContainer = null;
        this.contentArea = null;
        this.eventSystem = eventSystem;
    }

    renderBaseLayout(platformInstance) {
        if (!this.appContainer) {
            console.error("UltimateUIManager: App container #app-ultimate not found!");
            document.body.innerHTML = '<p style="color:red;text-align:center;padding-top:50px;">Critical Error: Application container missing. Ensure an element with ID "app-ultimate" exists.</p>';
            return;
        }
        this.appContainer.innerHTML = `
            <div class="ultimate-platform-layout">
                <header class="ultimate-header">
                    <img src="${platformInstance.vendorDatabase?.portnox?.logo || './img/vendors/portnox-logo.svg'}" alt="Portnox Logo" class="ultimate-logo">
                    <h1>Ultimate TCO Analyzer</h1>
                    <div class="ultimate-header-actions">
                        <button id="ultimate-export-btn" class="btn-ultimate primary"><i class="fas fa-download"></i> Export Report</button>
                    </div>
                </header>
                <aside class="ultimate-sidebar">
                    <nav class="ultimate-nav" id="ultimate-main-nav">
                        <!-- Nav items will be populated by updateNav -->
                    </nav>
                    <div class="ultimate-config-summary">
                        <h4>Configuration</h4>
                        <p id="config-summary-devices">Devices: ${platformInstance.config.devices}</p>
                        <p id="config-summary-industry">Industry: ${platformInstance.config.industry}</p>
                        <button id="edit-config-btn" class="btn-ultimate secondary full-width">Edit Configuration</button>
                    </div>
                </aside>
                <main class="ultimate-main-content">
                    <div class="ultimate-view-header">
                        <h2 id="ultimate-view-title">Dashboard</h2>
                        <div id="ultimate-view-actions"></div>
                    </div>
                    <div class="ultimate-content-area" id="ultimate-content-area">
                        <!-- View content will be rendered here -->
                    </div>
                </main>
                <footer class="ultimate-footer">
                    <p>&copy; ${new Date().getFullYear()} Portnox. Ultimate TCO Platform.</p>
                </footer>
            </div>
            ${this.renderConfigModal(platformInstance.config)}
        `;
        this.navContainer = this.appContainer.querySelector('#ultimate-main-nav');
        this.contentArea = this.appContainer.querySelector('#ultimate-content-area');

        this.attachModalEventHandlers(platformInstance);
        document.getElementById('ultimate-export-btn').addEventListener('click', () => {
            // platformInstance.exportReport(); // Assuming platform will have this method
            alert('Export functionality to be implemented in UltimatePlatform!');
        });
    }

    attachModalEventHandlers(platformInstance) {
        const modal = document.getElementById('ultimate-config-modal');
        const openBtn = document.getElementById('edit-config-btn');
        const closeBtn = modal.querySelector('.ultimate-modal-close');
        const saveBtn = modal.querySelector('#ultimate-save-config-btn');

        openBtn.addEventListener('click', () => modal.style.display = 'block');
        closeBtn.addEventListener('click', () => modal.style.display = 'none');
        window.addEventListener('click', (event) => {
            if (event.target == modal) {
                modal.style.display = 'none';
            }
        });

        saveBtn.addEventListener('click', () => {
            const newConfig = {
                devices: parseInt(document.getElementById('ultimate-config-devices').value),
                users: parseInt(document.getElementById('ultimate-config-users').value), // Assuming an input exists
                years: parseInt(document.getElementById('ultimate-config-years').value),
                industry: document.getElementById('ultimate-config-industry').value,
                selectedVendors: Array.from(document.querySelectorAll('#ultimate-config-vendors input:checked')).map(cb => cb.value)
                // Add compliance frameworks if needed
            };
            // Emit an event that ConfigManager can listen to, or call ConfigManager directly
            this.eventSystem.emit('config:control:changed', newConfig);
            modal.style.display = 'none';

            // Update summary display
            document.getElementById('config-summary-devices').textContent = `Devices: ${newConfig.devices}`;
            document.getElementById('config-summary-industry').textContent = `Industry: ${newConfig.industry}`;
        });
    }

    renderConfigModal(currentConfig) {
        // Simplified vendor list for modal - in real app, get from MasterVendorDatabase keys
        const allVendorIds = ['portnox', 'cisco', 'aruba', 'fortinet', 'forescout', 'hpe'];
        return `
            <div id="ultimate-config-modal" class="ultimate-modal">
                <div class="ultimate-modal-content">
                    <span class="ultimate-modal-close">&times;</span>
                    <h2>Platform Configuration</h2>
                    <div class="ultimate-form-grid">
                        <div class="form-group">
                            <label for="ultimate-config-devices">Number of Devices:</label>
                            <input type="number" id="ultimate-config-devices" value="${currentConfig.devices}" class="form-input-ultimate">
                        </div>
                         <div class="form-group">
                            <label for="ultimate-config-users">Number of Users:</label>
                            <input type="number" id="ultimate-config-users" value="${currentConfig.users}" class="form-input-ultimate">
                        </div>
                        <div class="form-group">
                            <label for="ultimate-config-years">Analysis Period (Years):</label>
                            <input type="number" id="ultimate-config-years" value="${currentConfig.years}" class="form-input-ultimate">
                        </div>
                        <div class="form-group">
                            <label for="ultimate-config-industry">Industry:</label>
                            <select id="ultimate-config-industry" class="form-select-ultimate">
                                ${['technology', 'healthcare', 'finance', 'retail', 'manufacturing', 'education', 'government'].map(ind => `<option value="${ind}" ${currentConfig.industry === ind ? 'selected' : ''}>${ind.charAt(0).toUpperCase() + ind.slice(1)}</option>`).join('')}
                            </select>
                        </div>
                    </div>
                    <div class="form-group">
                        <label>Select Vendors:</label>
                        <div id="ultimate-config-vendors" class="ultimate-checkbox-group">
                            ${allVendorIds.map(id => `
                                <label>
                                    <input type="checkbox" value="${id}" ${currentConfig.selectedVendors.includes(id) ? 'checked' : ''}>
                                    ${id.charAt(0).toUpperCase() + id.slice(1)}
                                </label>
                            `).join('')}
                        </div>
                    </div>
                    <button id="ultimate-save-config-btn" class="btn-ultimate primary">Save Configuration</button>
                </div>
            </div>
        `;
    }

    updateNav(currentViewKey) {
        if (!this.navContainer) return;
        // These should match the keys used in platform.views
        const navItems = [
            { key: 'dashboard', icon: 'fa-tachometer-alt', label: 'Dashboard' },
            { key: 'vendorselection', icon: 'fa-check-square', label: 'Select Vendors'},
            { key: 'financial', icon: 'fa-dollar-sign', label: 'Financial Analysis' },
            { key: 'risksecurity', icon: 'fa-shield-alt', label: 'Risk & Security' }, // Note: key might differ from class name
            { key: 'compliance', icon: 'fa-certificate', label: 'Compliance' },
            { key: 'operationalimpact', icon: 'fa-cogs', label: 'Operational Impact' },
            { key: 'comparison', icon: 'fa-balance-scale', label: 'Feature Comparison' },
            { key: 'strategicinsights', icon: 'fa-lightbulb', label: 'Strategic Insights' },
            { key: 'executivesummary', icon: 'fa-user-tie', label: 'Executive Summary' }
        ];
        this.navContainer.innerHTML = navItems.map(item => `
            <a href="#" class="nav-tab-ultimate ${item.key === currentViewKey ? 'active' : ''}" data-view="${item.key}">
                <i class="fas ${item.icon}"></i> ${item.label}
            </a>
        `).join('');
    }

    getContentArea() {
        return this.contentArea || document.getElementById('ultimate-content-area');
    }

    setLoading(isLoading) {
        const loader = this.appContainer.querySelector('.ultimate-loading-overlay'); // Assuming a global loader
        if (isLoading) {
            if (!loader) {
                const newLoader = document.createElement('div');
                newLoader.className = 'ultimate-loading-overlay';
                newLoader.innerHTML = '<div class="ultimate-spinner"></div>';
                this.appContainer.appendChild(newLoader);
            } else {
                loader.style.display = 'flex';
            }
        } else if (loader) {
            loader.style.display = 'none';
        }
        // For content area specific loading:
        if (this.contentArea) {
             this.contentArea.classList.toggle('loading-state', isLoading);
        }
    }

    isContentLoaded() {
        return this.contentArea && this.contentArea.innerHTML.trim() !== '';
    }

    showError(message, onContentArea = false) {
        const targetElement = onContentArea && this.contentArea ? this.contentArea : this.appContainer;
        targetElement.innerHTML = `<div class="ultimate-error-message">${message}</div>`;
    }

    updateViewTitle(title) {
        const titleEl = document.getElementById('ultimate-view-title');
        if (titleEl) titleEl.textContent = title;
    }
}
```
