/**
 * Utility functions for the TCO Calculator
 */

// Format currency - make globally available for chart tooltips
window.formatCurrency = function(value) {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD',
    maximumFractionDigits: 0
  }).format(value);
};

// Format percentage
function formatPercentage(value) {
  return `${value.toFixed(1)}%`;
}

// Calculate complexity multiplier based on settings
function calculateComplexityMultiplier(vendor, cloudBased) {
  let multiplier = 1.0;
  
  // Cloud vendors are less affected by complexity factors
  const cloudReductionFactor = cloudBased ? 0.4 : 1.0;
  
  if (document.getElementById('multiple-locations')?.checked) {
    // Additional 10% per location beyond the first, up to a max of 100% extra
    const locationCount = parseInt(document.getElementById('location-count')?.value) || 1;
    multiplier += Math.min(0.1 * (locationCount - 1), 1.0) * cloudReductionFactor;
  }
  
  if (document.getElementById('complex-authentication')?.checked) {
    multiplier += 0.15 * cloudReductionFactor;
  }
  
  if (document.getElementById('legacy-devices')?.checked) {
    // Additional 0-30% based on percentage of legacy devices
    const legacyPercentage = parseInt(document.getElementById('legacy-percentage')?.value) || 10;
    multiplier += (legacyPercentage / 100) * 0.3 * cloudReductionFactor;
  }
  
  if (document.getElementById('cloud-integration')?.checked) {
    // Cloud vendors handle this better
    multiplier += 0.1 * cloudReductionFactor;
  }
  
  if (document.getElementById('custom-policies')?.checked) {
    // Different multipliers based on policy complexity
    const policyComplexity = document.getElementById('policy-complexity')?.value || 'medium';
    if (policyComplexity === 'low') {
      multiplier += 0.05 * cloudReductionFactor;
    } else if (policyComplexity === 'medium') {
      multiplier += 0.15 * cloudReductionFactor;
    } else if (policyComplexity === 'high') {
      multiplier += 0.25 * cloudReductionFactor;
    }
  }
  
  return multiplier;
}

// Calculate migration complexity factor
function calculateMigrationFactor(fromVendor, toVendor) {
  if (!fromVendor || !toVendor) return 0.5; // Default factor
  
  const migrationFactors = {
    cisco: {
      aruba: 0.7,
      forescout: 0.6,
      nps: 0.5,
      portnox: 0.3
    },
    aruba: {
      cisco: 0.7,
      forescout: 0.6,
      nps: 0.5,
      portnox: 0.3
    },
    forescout: {
      cisco: 0.7,
      aruba: 0.6,
      nps: 0.5,
      portnox: 0.3
    },
    nps: {
      cisco: 0.8,
      aruba: 0.7,
      forescout: 0.7,
      portnox: 0.3
    },
    portnox: {
      cisco: 0.8,
      aruba: 0.7,
      forescout: 0.7,
      nps: 0.6
    }
  };
  
  if (fromVendor === toVendor) {
    return 0; // Same vendor has no migration cost
  }
  
  if (migrationFactors[fromVendor] && migrationFactors[fromVendor][toVendor]) {
    return migrationFactors[fromVendor][toVendor];
  }
  
  return 0.5; // Default factor if not found
}

// Get FTE costs
function calculateFTECosts(allocation) {
  if (!allocation) return 0;
  
  const fteCosts = {
    networkAdmin: 120000,
    securityAdmin: 135000,
    systemAdmin: 110000,
    helpDesk: 75000
  };
  
  let totalCost = 0;
  for (const [role, amount] of Object.entries(allocation)) {
    totalCost += fteCosts[role] * amount;
  }
  
  return totalCost;
}

// Function to toggle visibility of an element
function toggleVisibility(elementId) {
  const element = document.getElementById(elementId);
  if (element) {
    element.classList.toggle('hidden');
  }
}

// Function to set active tab
function setActiveTab(tabId) {
  // Hide all tab panes
  document.querySelectorAll('.tab-pane').forEach(pane => {
    pane.classList.remove('active');
  });
  
  // Remove active class from all tab buttons
  document.querySelectorAll('.tab-button').forEach(button => {
    button.classList.remove('active');
  });
  
  // Show selected tab pane
  const selectedPane = document.getElementById(tabId);
  if (selectedPane) {
    selectedPane.classList.add('active');
  }
  
  // Add active class to selected tab button
  document.querySelectorAll(`.tab-button[data-tab="${tabId}"]`).forEach(button => {
    button.classList.add('active');
  });
}

// Function to set active sub tab
function setActiveSubTab(subtabId) {
  // Hide all sub tab panes
  document.querySelectorAll('.sub-tab-pane').forEach(pane => {
    pane.classList.remove('active');
  });
  
  // Remove active class from all sub tab buttons
  document.querySelectorAll('.sub-tab-button').forEach(button => {
    button.classList.remove('active');
  });
  
  // Show selected sub tab pane
  const selectedPane = document.getElementById(subtabId);
  if (selectedPane) {
    selectedPane.classList.add('active');
  }
  
  // Add active class to selected sub tab button
  document.querySelectorAll(`.sub-tab-button[data-subtab="${subtabId}"]`).forEach(button => {
    button.classList.add('active');
  });
}

// Function to create a HTML element with class and text
function createElement(tag, className, text) {
  const element = document.createElement(tag);
  if (className) {
    element.className = className;
  }
  if (text) {
    element.textContent = text;
  }
  return element;
}
