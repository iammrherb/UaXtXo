).map(([key, compliance]) => `
            <div class="compliance-item">
                <label class="checkbox-wrapper">
                    <input type="checkbox" class="compliance-checkbox" value="${key}" 
                           ${this.config.complianceFrameworks.includes(key) ? 'checked' : ''}>
                    <span class="checkbox-custom"></span>
                    <span class="compliance-info">
                        <span class="compliance-name">${compliance.name}</span>
                        <span class="compliance-priority priority-${compliance.priority.toLowerCase()}">${compliance.priority}</span>
                    </span>
                </label>
            </div>
        `).join('');
    }
    
    setupAdvancedEventListeners() {
        // Main calculation button
        document.getElementById('calculate-analysis')?.addEventListener('click', () => {
            this.performComprehensiveAnalysis();
        });
        
        // Export functionality
        document.getElementById('export-comprehensive')?.addEventListener('click', () => {
            this.exportComprehensiveReport();
        });
        
        // Schedule demo
        document.getElementById('schedule-demo')?.addEventListener('click', () => {
            this.scheduleDemo();
        });
        
        // Vendor selection
        document.querySelectorAll('.vendor-card').forEach(card => {
            card.addEventListener('click', (e) => {
                const vendorId = card.getAttribute('data-vendor');
                card.classList.toggle('selected');
                
                if (card.classList.contains('selected')) {
                    if (!this.selectedVendors.includes(vendorId)) {
                        this.selectedVendors.push(vendorId);
                    }
                } else {
                    this.selectedVendors = this.selectedVendors.filter(v => v !== vendorId);
                }
                
                this.updateVendorSelectionActions();
            });
        });
        
        // Quick vendor actions
        document.getElementById('select-all-vendors')?.addEventListener('click', () => {
            this.selectedVendors = Object.keys(this.vendorData);
            this.updateVendorSelection();
        });
        
        document.getElementById('select-cloud-vendors')?.addEventListener('click', () => {
            this.selectedVendors = Object.entries(this.vendorData)
                .filter(([id, vendor]) => vendor.architecture.includes('Cloud'))
                .map(([id]) => id);
            this.updateVendorSelection();
        });
        
        document.getElementById('compare-top-3')?.addEventListener('click', () => {
            this.selectedVendors = ['portnox', 'cisco', 'aruba'];
            this.updateVendorSelection();
        });
        
        // Configuration inputs
        document.getElementById('industry-select')?.addEventListener('change', (e) => {
            this.config.industry = e.target.value;
            this.updateIndustryImpact();
        });
        
        document.getElementById('device-count')?.addEventListener('input', (e) => {
            this.config.deviceCount = parseInt(e.target.value) || 1000;
        });
        
        document.getElementById('location-count')?.addEventListener('input', (e) => {
            this.config.locationCount = parseInt(e.target.value) || 10;
        });
        
        document.getElementById('user-count')?.addEventListener('input', (e) => {
            this.config.userCount = parseInt(e.target.value) || 5000;
        });
        
        // Compliance checkboxes
        document.querySelectorAll('.compliance-checkbox').forEach(checkbox => {
            checkbox.addEventListener('change', () => {
                this.updateComplianceRequirements();
            });
        });
        
        // Risk inputs
        document.getElementById('security-posture')?.addEventListener('change', (e) => {
            this.config.securityPosture = e.target.value;
        });
        
        document.getElementById('breach-cost')?.addEventListener('input', (e) => {
            this.config.breachCost = parseInt(e.target.value) || 4350000;
        });
        
        document.getElementById('downtime-cost')?.addEventListener('input', (e) => {
            this.config.downtimeCost = parseInt(e.target.value) || 10000;
        });
        
        document.getElementById('insurance-premium')?.addEventListener('input', (e) => {
            this.config.insurancePremium = parseInt(e.target.value) || 150000;
        });
        
        // Tab navigation
        document.querySelectorAll('.tab-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                const tabId = btn.getAttribute('data-tab');
                this.switchToTab(tabId);
            });
        });
        
        // FAB menu
        const fab = document.getElementById('ai-assistant');
        const fabMenu = document.querySelector('.fab-menu');
        
        fab?.addEventListener('click', () => {
            fabMenu?.classList.toggle('active');
            fab.classList.toggle('active');
        });
        
        // Close FAB menu when clicking outside
        document.addEventListener('click', (e) => {
            if (!e.target.closest('.fab-container')) {
                fabMenu?.classList.remove('active');
                fab?.classList.remove('active');
            }
        });
    }
    
    updateVendorSelection() {
        document.querySelectorAll('.vendor-card').forEach(card => {
            const vendorId = card.getAttribute('data-vendor');
            if (this.selectedVendors.includes(vendorId)) {
                card.classList.add('selected');
            } else {
                card.classList.remove('selected');
            }
        });
        this.updateVendorSelectionActions();
    }
    
    updateVendorSelectionActions() {
        const selectedCount = this.selectedVendors.length;
        const actionText = document.querySelector('.vendor-actions-text');
        if (actionText) {
            actionText.textContent = `${selectedCount} vendor${selectedCount !== 1 ? 's' : ''} selected`;
        }
    }
    
    updateIndustryImpact() {
        const industry = this.industryData[this.config.industry];
        if (industry) {
            // Update breach cost based on industry
            const breachInput = document.getElementById('breach-cost');
            if (breachInput) {
                breachInput.value = industry.breachCost;
                this.config.breachCost = industry.breachCost;
            }
            
            // Update downtime cost
            const downtimeInput = document.getElementById('downtime-cost');
            if (downtimeInput && industry.downTimeImpact) {
                downtimeInput.value = industry.downTimeImpact;
                this.config.downtimeCost = industry.downTimeImpact;
            }
            
            // Show industry-specific alerts
            this.showIndustryAlert(industry);
        }
    }
    
    showIndustryAlert(industry) {
        const alertHtml = `
            <div class="industry-alert animate-slide-in">
                <div class="alert-icon">${industry.icon}</div>
                <div class="alert-content">
                    <h4>${industry.name} Selected</h4>
                    <p>Key considerations: ${industry.specificRisks.slice(0, 3).join(', ')}</p>
                    <p>Recommended compliance: ${industry.regulatoryRequirements.slice(0, 3).join(', ')}</p>
                </div>
                <button class="alert-close" onclick="this.parentElement.remove()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        `;
        
        const existingAlert = document.querySelector('.industry-alert');
        if (existingAlert) existingAlert.remove();
        
        document.querySelector('.configuration-section')?.insertAdjacentHTML('afterbegin', alertHtml);
    }
    
    updateComplianceRequirements() {
        const checkedFrameworks = Array.from(document.querySelectorAll('.compliance-checkbox:checked'))
            .map(cb => cb.value);
        
        this.config.complianceFrameworks = checkedFrameworks;
        
        // Update compliance complexity meter
        const complexity = this.calculateComplianceComplexity();
        const meterFill = document.getElementById('compliance-meter');
        if (meterFill) {
            meterFill.style.width = `${complexity}%`;
            meterFill.className = 'meter-fill';
            if (complexity > 75) meterFill.classList.add('high');
            else if (complexity > 50) meterFill.classList.add('medium');
            else meterFill.classList.add('low');
        }
    }
    
    calculateComplianceComplexity() {
        const frameworkCount = this.config.complianceFrameworks.length;
        const weights = {
            'nist-csf': 1.0,
            'pci-dss': 1.5,
            'hipaa': 1.8,
            'gdpr': 1.7,
            'sox': 1.6,
            'cmmc': 2.0,
            'nerc-cip': 2.2,
            'fedramp': 2.5,
            'fisma': 2.3
        };
        
        let totalWeight = 0;
        this.config.complianceFrameworks.forEach(fw => {
            totalWeight += (weights[fw] || 1.0);
        });
        
        return Math.min(100, (totalWeight / 10) * 100);
    }
    
    switchToTab(tabId) {
        // Update active tab button
        document.querySelectorAll('.tab-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        document.querySelector(`[data-tab="${tabId}"]`)?.classList.add('active');
        
        // Update active panel
        document.querySelectorAll('.tab-panel').forEach(panel => {
            panel.classList.remove('active');
        });
        document.querySelector(`[data-panel="${tabId}"]`)?.classList.add('active');
        
        // Load content for the tab
        this.loadTabContent(tabId);
    }
    
    loadTabContent(tabId) {
        const contentMap = {
            'executive-overview': () => this.loadExecutiveOverview(),
            'financial-analysis': () => this.loadFinancialAnalysis(),
            'security-posture': () => this.loadSecurityPosture(),
            'compliance-analysis': () => this.loadComplianceAnalysis(),
            'vendor-comparison': () => this.loadVendorComparison(),
            'implementation-roadmap': () => this.loadImplementationRoadmap(),
            'industry-insights': () => this.loadIndustryInsights()
        };
        
        const loader = contentMap[tabId];
        if (loader) {
            loader.call(this);
        }
    }
    
    performInitialCalculations() {
        // Show quick stats with animation
        this.animateQuickStats();
    }
    
    animateQuickStats() {
        document.querySelectorAll('.animate-counter').forEach(item => {
            const valueElement = item.querySelector('.stat-value');
            const targetValue = parseInt(valueElement.getAttribute('data-value'));
            const suffix = valueElement.textContent.match(/[^\d]+$/)?.[0] || '';
            
            this.animateValue(valueElement, 0, targetValue, 2000, suffix);
        });
    }
    
    animateValue(element, start, end, duration, suffix = '') {
        const startTime = performance.now();
        
        const updateValue = (currentTime) => {
            const elapsed = currentTime - startTime;
            const progress = Math.min(elapsed / duration, 1);
            
            // Easing function
            const easeOutQuart = 1 - Math.pow(1 - progress, 4);
            
            const current = Math.round(start + (end - start) * easeOutQuart);
            element.textContent = current + suffix;
            
            if (progress < 1) {
                requestAnimationFrame(updateValue);
            }
        };
        
        requestAnimationFrame(updateValue);
    }
    
    performComprehensiveAnalysis() {
        // Show loading state
        this.showLoadingState();
        
        // Simulate calculation delay for effect
        setTimeout(() => {
            // Perform calculations
            const results = this.calculateComprehensiveResults();
            
            // Store results
            this.analysisResults = results;
            
            // Show results section
            document.getElementById('results-section').style.display = 'block';
            
            // Update KPIs
            this.updateExecutiveKPIs(results);
            
            // Load initial tab content
            this.loadExecutiveOverview();
            
            // Hide loading state
            this.hideLoadingState();
            
            // Smooth scroll to results
            document.getElementById('results-section').scrollIntoView({ 
                behavior: 'smooth', 
                block: 'start' 
            });
            
            // Trigger animations
            this.triggerResultAnimations();
            
        }, 1500);
    }
    
    showLoadingState() {
        const button = document.getElementById('calculate-analysis');
        if (button) {
            button.disabled = true;
            button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Analyzing...';
        }
    }
    
    hideLoadingState() {
        const button = document.getElementById('calculate-analysis');
        if (button) {
            button.disabled = false;
            button.innerHTML = '<i class="fas fa-calculator"></i> <span>Calculate Analysis</span>';
        }
    }
    
    calculateComprehensiveResults() {
        const results = {
            summary: {},
            vendors: {},
            financial: {},
            security: {},
            compliance: {},
            risk: {},
            implementation: {},
            recommendations: []
        };
        
        // Calculate for each selected vendor
        this.selectedVendors.forEach(vendorId => {
            const vendor = this.vendorData[vendorId];
            const vendorResults = this.calculateVendorMetrics(vendor, vendorId);
            results.vendors[vendorId] = vendorResults;
        });
        
        // Calculate comparative metrics
        results.summary = this.calculateSummaryMetrics(results.vendors);
        results.financial = this.calculateFinancialMetrics(results.vendors);
        results.security = this.calculateSecurityMetrics(results.vendors);
        results.compliance = this.calculateComplianceMetrics(results.vendors);
        results.risk = this.calculateRiskMetrics(results.vendors);
        results.implementation = this.calculateImplementationMetrics(results.vendors);
        
        // Generate recommendations
        results.recommendations = this.generateRecommendations(results);
        
        return results;
    }
    
    calculateVendorMetrics(vendor, vendorId) {
        const deviceCount = this.config.deviceCount;
        const years = this.config.analysisPeriod || 3;
        const industry = this.industryData[this.config.industry];
        
        // Calculate licensing costs
        const licensingCost = vendor.pricing.basePrice * deviceCount * 12; // Annual
        
        // Apply volume discounts
        let discount = 0;
        vendor.pricing.volumeDiscounts.forEach(tier => {
            if (deviceCount >= tier.min && deviceCount <= tier.max) {
                discount = tier.discount;
            }
        });
        
        const discountedLicensing = licensingCost * (1 - discount / 100);
        
        // Calculate total costs
        const implementationCost = vendor.costs.implementation + vendor.costs.training;
        const annualOperationalCost = vendor.costs.personnelPerYear + 
                                    vendor.costs.support + 
                                    vendor.costs.maintenance +
                                    vendor.costs.downtimePerYear;
        
        const totalFirstYear = implementationCost + discountedLicensing + annualOperationalCost;
        const totalThreeYear = implementationCost + (discountedLicensing + annualOperationalCost) * 3;
        
        // Calculate savings vs average
        const avgCompetitorCost = this.calculateAverageCompetitorCost(vendorId);
        const savings = avgCompetitorCost - totalThreeYear;
        
        // Calculate ROI
        const roi = ((savings / totalThreeYear) * 100).toFixed(0);
        
        // Risk calculations
        const riskReduction = vendor.riskReduction || {};
        const breachProbabilityReduction = riskReduction.breachProbabilityReduction || 0;
        const potentialLossAvoidance = (this.config.breachCost * breachProbabilityReduction / 100);
        
        // Insurance impact
        const insuranceReduction = riskReduction.insurancePremiumReduction || 0;
        const insuranceSavings = this.config.insurancePremium * insuranceReduction / 100;
        
        return {
            costs: {
                licensing: discountedLicensing,
                implementation: implementationCost,
                operational: annualOperationalCost,
                firstYear: totalFirstYear,
                threeYear: totalThreeYear,
                perDevice: totalThreeYear / deviceCount / 3,
                perUser: totalThreeYear / this.config.userCount / 3
            },
            savings: {
                vsAverage: savings,
                percentage: (savings / avgCompetitorCost * 100).toFixed(0),
                roi: roi,
                paybackMonths: vendor.pricing.roi?.paybackPeriod || 24
            },
            risk: {
                reduction: breachProbabilityReduction,
                avoidedLoss: potentialLossAvoidance,
                insuranceSavings: insuranceSavings,
                totalRiskValue: potentialLossAvoidance + insuranceSavings
            },
            operational: {
                implementationDays: vendor.metrics.deploymentTime,
                fteRequired: vendor.metrics.fteRequired,
                availability: vendor.metrics.availability,
                userSatisfaction: vendor.metrics.userSatisfaction
            },
            compliance: this.calculateVendorCompliance(vendor),
            security: {
                score: vendor.security.overallSecurityScore,
                zeroTrust: vendor.security.zeroTrustScore,
                capabilities: vendor.security
            }
        };
    }
    
    calculateAverageCompetitorCost(excludeVendorId) {
        const competitors = Object.entries(this.vendorData)
            .filter(([id]) => id !== excludeVendorId)
            .map(([id, vendor]) => vendor);
        
        const avgCost = competitors.reduce((sum, vendor) => {
            const cost = vendor.costs.implementation + 
                        (vendor.costs.personnelPerYear * 3) +
                        (vendor.pricing.basePrice * this.config.deviceCount * 36);
            return sum + cost;
        }, 0) / competitors.length;
        
        return avgCost;
    }
    
    calculateVendorCompliance(vendor) {
        const selectedFrameworks = this.config.complianceFrameworks;
        let totalCoverage = 0;
        let totalAutomation = 0;
        let count = 0;
        
        selectedFrameworks.forEach(framework => {
            const compliance = vendor.compliance.frameworks[framework];
            if (compliance) {
                totalCoverage += compliance.coverage;
                totalAutomation += compliance.automated;
                count++;
            }
        });
        
        return {
            averageCoverage: count > 0 ? totalCoverage / count : 0,
            averageAutomation: count > 0 ? totalAutomation / count : 0,
            frameworks: vendor.compliance.frameworks
        };
    }
    
    calculateSummaryMetrics(vendorResults) {
        const portnoxResults = vendorResults['portnox'];
        const competitorResults = Object.entries(vendorResults)
            .filter(([id]) => id !== 'portnox')
            .map(([id, results]) => results);
        
        const avgCompetitorCost = competitorResults.reduce((sum, r) => sum + r.costs.threeYear, 0) / competitorResults.length;
        const avgCompetitorROI = competitorResults.reduce((sum, r) => sum + parseInt(r.savings.roi), 0) / competitorResults.length;
        
        return {
            totalSavings: avgCompetitorCost - portnoxResults.costs.threeYear,
            percentageSavings: ((avgCompetitorCost - portnoxResults.costs.threeYear) / avgCompetitorCost * 100).toFixed(0),
            roiImprovement: portnoxResults.savings.roi - avgCompetitorROI,
            paybackPeriod: portnoxResults.savings.paybackMonths,
            riskReduction: portnoxResults.risk.reduction,
            complianceCoverage: portnoxResults.compliance.averageCoverage
        };
    }
    
    calculateFinancialMetrics(vendorResults) {
        return {
            tcoComparison: Object.entries(vendorResults).map(([id, results]) => ({
                vendor: this.vendorData[id].shortName,
                firstYear: results.costs.firstYear,
                threeYear: results.costs.threeYear,
                perDevice: results.costs.perDevice,
                roi: results.savings.roi
            })),
            savingsBreakdown: {
                licensing: this.calculateLicensingSavings(vendorResults),
                operational: this.calculateOperationalSavings(vendorResults),
                risk: this.calculateRiskSavings(vendorResults),
                total: this.calculateTotalSavings(vendorResults)
            }
        };
    }
    
    calculateSecurityMetrics(vendorResults) {
        return Object.entries(vendorResults).map(([id, results]) => ({
            vendor: this.vendorData[id].shortName,
            securityScore: results.security.score,
            zeroTrustScore: results.security.zeroTrust,
            riskReduction: results.risk.reduction,
            capabilities: results.security.capabilities
        }));
    }
    
    calculateComplianceMetrics(vendorResults) {
        return Object.entries(vendorResults).map(([id, results]) => ({
            vendor: this.vendorData[id].shortName,
            coverage: results.compliance.averageCoverage,
            automation: results.compliance.averageAutomation,
            frameworks: results.compliance.frameworks
        }));
    }
    
    calculateRiskMetrics(vendorResults) {
        const scenarios = this.riskScenarios;
        const metrics = {};
        
        Object.entries(scenarios).forEach(([scenarioId, scenario]) => {
            metrics[scenarioId] = {
                name: scenario.name,
                baseline: scenario.probability.baseline,
                withNac: {},
                impact: scenario.impact
            };
            
            Object.entries(vendorResults).forEach(([vendorId, results]) => {
                const vendor = this.vendorData[vendorId];
                const effectiveness = scenario.nacMitigation.effectiveness * 
                                    (vendor.security.overallSecurityScore / 100);
                
                metrics[scenarioId].withNac[vendorId] = {
                    probability: scenario.probability.baseline * (1 - effectiveness / 100),
                    reduction: effectiveness,
                    financialImpact: scenario.impact.financial * (1 - effectiveness / 100)
                };
            });
        });
        
        return metrics;
    }
    
    calculateImplementationMetrics(vendorResults) {
        return Object.entries(vendorResults).map(([id, results]) => ({
            vendor: this.vendorData[id].shortName,
            deploymentDays: results.operational.implementationDays,
            fteRequired: results.operational.fteRequired,
            complexity: this.calculateImplementationComplexity(id),
            milestones: this.generateImplementationMilestones(id)
        }));
    }
    
    calculateImplementationComplexity(vendorId) {
        const vendor = this.vendorData[vendorId];
        let complexity = 0;
        
        // Architecture complexity
        if (vendor.architecture.includes('On-Premises')) complexity += 40;
        else if (vendor.architecture.includes('Hybrid')) complexity += 20;
        else complexity += 10;
        
        // Integration complexity
        complexity += (100 - vendor.metrics.integrationEffort) / 2;
        
        // Training complexity
        complexity += vendor.metrics.trainingHours / 2;
        
        return Math.min(100, complexity);
    }
    
    generateImplementationMilestones(vendorId) {
        const vendor = this.vendorData[vendorId];
        const milestones = [];
        
        if (vendor.architecture.includes('Cloud')) {
            milestones.push(
                { week: 1, task: 'Account setup and initial configuration' },
                { week: 1, task: 'Network integration planning' },
                { week: 2, task: 'Pilot deployment (10% of devices)' },
                { week: 3, task: 'Policy configuration and testing' },
                { week: 4, task: 'Full deployment rollout' }
            );
        } else {
            milestones.push(
                { week: 1, task: 'Hardware procurement and setup' },
                { week: 3, task: 'Software installation and configuration' },
                { week: 5, task: 'Network integration and testing' },
                { week: 8, task: 'Pilot deployment' },
                { week: 12, task: 'Full deployment complete' }
            );
        }
        
        return milestones;
    }
    
    calculateLicensingSavings(vendorResults) {
        const portnox = vendorResults['portnox'];
        const competitors = Object.entries(vendorResults)
            .filter(([id]) => id !== 'portnox')
            .map(([id, results]) => results);
        
        const avgLicensing = competitors.reduce((sum, r) => sum + r.costs.licensing, 0) / competitors.length;
        return avgLicensing - portnox.costs.licensing;
    }
    
    calculateOperationalSavings(vendorResults) {
        const portnox = vendorResults['portnox'];
        const competitors = Object.entries(vendorResults)
            .filter(([id]) => id !== 'portnox')
            .map(([id, results]) => results);
        
        const avgOperational = competitors.reduce((sum, r) => sum + r.costs.operational * 3, 0) / competitors.length;
        return avgOperational - (portnox.costs.operational * 3);
    }
    
    calculateRiskSavings(vendorResults) {
        const portnox = vendorResults['portnox'];
        return portnox.risk.totalRiskValue;
    }
    
    calculateTotalSavings(vendorResults) {
        return this.calculateLicensingSavings(vendorResults) +
               this.calculateOperationalSavings(vendorResults) +
               this.calculateRiskSavings(vendorResults);
    }
    
    generateRecommendations(results) {
        const recommendations = [];
        
        // Primary recommendation
        recommendations.push({
            priority: 'High',
            title: 'Adopt Portnox Cloud for Maximum ROI',
            description: `Based on your analysis, Portnox Cloud delivers ${results.summary.percentageSavings}% cost savings with a ${results.summary.paybackPeriod}-month payback period.`,
            impact: 'Financial',
            action: 'Schedule a demonstration to validate fit'
        });
        
        // Compliance recommendation
        if (this.config.complianceFrameworks.length > 2) {
            recommendations.push({
                priority: 'High',
                title: 'Leverage Automated Compliance',
                description: 'With multiple compliance requirements, Portnox\'s automated compliance reporting can save 40+ hours monthly.',
                impact: 'Operational',
                action: 'Review compliance automation features'
            });
        }
        
        // Security recommendation
        if (results.summary.riskReduction > 80) {
            recommendations.push({
                priority: 'Medium',
                title: 'Enhance Cyber Insurance Position',
                description: `${results.summary.riskReduction}% risk reduction qualifies for premium reductions up to 28%.`,
                impact: 'Risk',
                action: 'Discuss with insurance provider'
            });
        }
        
        // Industry-specific recommendation
        const industry = this.industryData[this.config.industry];
        if (industry.specificChallenges.length > 0) {
            recommendations.push({
                priority: 'Medium',
                title: `Address ${industry.name} Challenges`,
                description: `Focus on: ${industry.specificChallenges[0]}`,
                impact: 'Strategic',
                action: 'Review industry-specific features'
            });
        }
        
        return recommendations;
    }
    
    updateExecutiveKPIs(results) {
        const kpiContainer = document.getElementById('executive-kpis');
        if (!kpiContainer) return;
        
        const kpis = [
            {
                icon: 'fa-piggy-bank',
                value: Math.round(results.summary.totalSavings / 1000),
                suffix: 'K',
                label: 'Total Savings',
                sublabel: '3-Year TCO Reduction',
                trend: `${results.summary.percentageSavings}% Lower`,
                color: 'success'
            },
            {
                icon: 'fa-chart-line',
                value: results.vendors['portnox'].savings.roi,
                suffix: '%',
                label: 'ROI',
                sublabel: '3-Year Return',
                trend: `${results.summary.paybackPeriod} Month Payback`,
                color: 'primary'
            },
            {
                icon: 'fa-shield-alt',
                value: results.summary.riskReduction,
                suffix: '%',
                label: 'Risk Reduction',
                sublabel: 'Security Improvement',
                trend: 'Enterprise Grade',
                color: 'warning'
            },
            {
                icon: 'fa-clipboard-check',
                value: Math.round(results.summary.complianceCoverage),
                suffix: '%',
                label: 'Compliance',
                sublabel: 'Automated Coverage',
                trend: `${this.config.complianceFrameworks.length} Frameworks`,
                color: 'info'
            },
            {
                icon: 'fa-clock',
                value: results.vendors['portnox'].operational.implementationDays,
                suffix: ' Days',
                label: 'Time to Value',
                sublabel: 'Implementation Speed',
                trend: '75% Faster',
                color: 'secondary'
            },
            {
                icon: 'fa-users',
                value: results.vendors['portnox'].operational.fteRequired,
                suffix: ' FTE',
                label: 'Resources',
                sublabel: 'IT Staff Required',
                trend: '87% Reduction',
                color: 'danger'
            }
        ];
        
        kpiContainer.innerHTML = kpis.map((kpi, index) => `
            <div class="kpi-card hover-lift animate-fade-in-up" style="animation-delay: ${index * 0.1}s">
                <div class="kpi-header">
                    <div class="kpi-icon bg-${kpi.color}">
                        <i class="fas ${kpi.icon}"></i>
                    </div>
                    <div class="kpi-trend ${kpi.color}">
                        <i class="fas fa-arrow-up"></i>
                        ${kpi.trend}
                    </div>
                </div>
                <div class="kpi-body">
                    <div class="kpi-value">
                        <span class="value-number" data-value="${kpi.value}">0</span>
                        <span class="value-suffix">${kpi.suffix}</span>
                    </div>
                    <div class="kpi-label">${kpi.label}</div>
                    <div class="kpi-sublabel">${kpi.sublabel}</div>
                </div>
                <div class="kpi-footer">
                    <div class="kpi-sparkline" id="sparkline-${index}"></div>
                </div>
            </div>
        `).join('');
        
        // Animate KPI values
        setTimeout(() => {
            document.querySelectorAll('.value-number').forEach(element => {
                const targetValue = parseInt(element.getAttribute('data-value'));
                this.animateValue(element, 0, targetValue, 1500);
            });
            
            // Create mini sparklines
            this.createSparklines(results);
        }, 100);
    }
    
    createSparklines(results) {
        // Create small trend charts for each KPI
        // This would use a charting library like Chart.js or D3.js
        // For now, we'll create simple CSS-based sparklines
        document.querySelectorAll('.kpi-sparkline').forEach((container, index) => {
            const data = this.generateSparklineData(index);
            container.innerHTML = `
                <svg viewBox="0 0 100 30" class="sparkline-svg">
                    <polyline points="${data}" fill="none" stroke="currentColor" stroke-width="2"/>
                </svg>
            `;
        });
    }
    
    generateSparklineData(index) {
        // Generate sample trend data for sparklines
        const points = [];
        for (let i = 0; i <= 10; i++) {
            const x = i * 10;
            const y = 25 - (Math.random() * 20 + i * 1.5);
            points.push(`${x},${y}`);
        }
        return points.join(' ');
    }
    
    triggerResultAnimations() {
        // Add animation classes to elements
        document.querySelectorAll('.animate-fade-in-up').forEach((element, index) => {
            setTimeout(() => {
                element.classList.add('animated');
            }, index * 100);
        });
        
        // Animate progress bars
        document.querySelectorAll('.progress-bar').forEach(bar => {
            const width = bar.getAttribute('data-width') || '0';
            setTimeout(() => {
                bar.style.width = width + '%';
            }, 500);
        });
        
        // Animate counters
        this.animateAllCounters();
    }
    
    animateAllCounters() {
        document.querySelectorAll('[data-animate-value]').forEach(element => {
            const targetValue = parseInt(element.getAttribute('data-animate-value'));
            const suffix = element.getAttribute('data-suffix') || '';
            this.animateValue(element, 0, targetValue, 2000, suffix);
        });
    }
    
    // Tab content loaders
    loadExecutiveOverview() {
        const container = document.getElementById('executive-overview-content');
        if (!container || !this.analysisResults) return;
        
        const results = this.analysisResults;
        const portnoxData = results.vendors['portnox'];
        
        container.innerHTML = `
            <div class="executive-overview-layout">
                <!-- Key Insights -->
                <div class="insights-section glass-morphism hover-lift">
                    <h3 class="section-title">
                        <i class="fas fa-lightbulb"></i>
                        Executive Insights
                    </h3>
                    <div class="insights-grid">
                        <div class="insight-card">
                            <div class="insight-icon"><i class="fas fa-dollar-sign"></i></div>
                            <div class="insight-content">
                                <h4>Significant Cost Reduction</h4>
                                <p>Portnox Cloud delivers <strong>${results.summary.percentageSavings}% lower TCO</strong> compared to traditional NAC solutions, saving <strong>$${Math.round(results.summary.totalSavings / 1000)}K</strong> over 3 years.</p>
                            </div>
                        </div>
                        <div class="insight-card">
                            <div class="insight-icon"><i class="fas fa-rocket"></i></div>
                            <div class="insight-content">
                                <h4>Rapid Time to Value</h4>
                                <p>Implementation in <strong>${portnoxData.operational.implementationDays} days</strong> vs industry average of 75 days, with <strong>${results.summary.paybackPeriod}-month payback</strong> period.</p>
                            </div>
                        </div>
                        <div class="insight-card">
                            <div class="insight-icon"><i class="fas fa-shield-check"></i></div>
                            <div class="insight-content">
                                <h4>Enhanced Security Posture</h4>
                                <p><strong>${results.summary.riskReduction}% risk reduction</strong> with comprehensive zero trust implementation, potentially avoiding <strong>$${Math.round(portnoxData.risk.avoidedLoss / 1000000)}M</strong> in breach costs.</p>
                            </div>
                        </div>
                        <div class="insight-card">
                            <div class="insight-icon"><i class="fas fa-cogs"></i></div>
                            <div class="insight-content">
                                <h4>Operational Excellence</h4>
                                <p>Requires only <strong>${portnoxData.operational.fteRequired} FTE</strong> vs industry average of 1.5 FTE, freeing IT resources for strategic initiatives.</p>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Visual Comparison Charts -->
                <div class="charts-row">
                    <div class="chart-container glass-morphism hover-lift">
                        <h3 class="chart-title">
                            <i class="fas fa-chart-bar"></i>
                            3-Year TCO Comparison
                        </h3>
                        <div id="tco-comparison-chart" class="chart-wrapper"></div>
                    </div>
                    
                    <div class="chart-container glass-morphism hover-lift">
                        <h3 class="chart-title">
                            <i class="fas fa-chart-pie"></i>
                            Cost Breakdown Analysis
                        </h3>
                        <div id="cost-breakdown-chart" class="chart-wrapper"></div>
                    </div>
                </div>
                
                <!-- Recommendations -->
                <div class="recommendations-section glass-morphism hover-lift">
                    <h3 class="section-title">
                        <i class="fas fa-tasks"></i>
                        Strategic Recommendations
                    </h3>
                    <div class="recommendations-grid">
                        ${results.recommendations.map(rec => `
                            <div class="recommendation-card priority-${rec.priority.toLowerCase()}">
                                <div class="rec-header">
                                    <span class="priority-badge">${rec.priority} Priority</span>
                                    <span class="impact-badge">${rec.impact}</span>
                                </div>
                                <h4>${rec.title}</h4>
                                <p>${rec.description}</p>
                                <div class="rec-action">
                                    <strong>Next Step:</strong> ${rec.action}
                                </div>
                            </div>
                        `).join('')}
                    </div>
                </div>
                
                <!-- Quick Actions -->
                <div class="quick-actions glass-morphism">
                    <button class="action-btn primary" onclick="window.portnoxPlatform.scheduleDemo()">
                        <i class="fas fa-calendar-plus"></i>
                        Schedule Executive Briefing
                    </button>
                    <button class="action-btn secondary" onclick="window.portnoxPlatform.exportExecutiveSummary()">
                        <i class="fas fa-file-pdf"></i>
                        Download Executive Summary
                    </button>
                    <button class="action-btn glass" onclick="window.portnoxPlatform.shareResults()">
                        <i class="fas fa-share-alt"></i>
                        Share Results
                    </button>
                </div>
            </div>
        `;
        
        // Create charts
        setTimeout(() => {
            this.createTCOComparisonChart();
            this.createCostBreakdownChart();
        }, 100);
    }
    
    loadFinancialAnalysis() {
        const container = document.getElementById('financial-analysis-content');
        if (!container || !this.analysisResults) return;
        
        const results = this.analysisResults;
        
        container.innerHTML = `
            <div class="financial-analysis-layout">
                <!-- Financial Summary Cards -->
                <div class="financial-summary-grid">
                    <div class="summary-card glass-morphism hover-lift">
                        <div class="card-icon"><i class="fas fa-chart-line"></i></div>
                        <div class="card-content">
                            <h4>Total Cost of Ownership</h4>
                            <div class="metric-value">$${Math.round(results.vendors['portnox'].costs.threeYear / 1000)}K</div>
                            <div class="metric-comparison">
                                <span class="positive">? ${results.summary.percentageSavings}%</span> vs competitors
                            </div>
                        </div>
                    </div>
                    
                    <div class="summary-card glass-morphism hover-lift">
                        <div class="card-icon"><i class="fas fa-percentage"></i></div>
                        <div class="card-content">
                            <h4>Return on Investment</h4>
                            <div class="metric-value">${results.vendors['portnox'].savings.roi}%</div>
                            <div class="metric-comparison">
                                <span class="positive">? ${results.summary.roiImprovement}%</span> vs average
                            </div>
                        </div>
                    </div>
                    
                    <div class="summary-card glass-morphism hover-lift">
                        <div class="card-icon"><i class="fas fa-calendar-alt"></i></div>
                        <div class="card-content">
                            <h4>Payback Period</h4>
                            <div class="metric-value">${results.summary.paybackPeriod} months</div>
                            <div class="metric-comparison">
                                <span class="positive">3x faster</span> than traditional NAC
                            </div>
                        </div>
                    </div>
                    
                    <div class="summary-card glass-morphism hover-lift">
                        <div class="card-icon"><i class="fas fa-piggy-bank"></i></div>
                        <div class="card-content">
                            <h4>Risk-Adjusted Savings</h4>
                            <div class="metric-value">$${Math.round((results.summary.totalSavings + results.vendors['portnox'].risk.totalRiskValue) / 1000)}K</div>
                            <div class="metric-comparison">
                                Including avoided losses
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Detailed Cost Analysis -->
                <div class="cost-analysis-section glass-morphism hover-lift">
                    <h3 class="section-title">
                        <i class="fas fa-coins"></i>
                        Detailed Cost Analysis
                    </h3>
                    <div class="cost-comparison-table">
                        <table class="data-table">
                            <thead>
                                <tr>
                                    <th>Cost Component</th>
                                    ${this.selectedVendors.map(id => `
                                        <th>${this.vendorData[id].shortName}</th>
                                    `).join('')}
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>Software Licensing</td>
                                    ${this.selectedVendors.map(id => `
                                        <td>$${Math.round(results.vendors[id].costs.licensing / 1000)}K</td>
                                    `).join('')}
                                </tr>
                                <tr>
                                    <td>Implementation</td>
                                    ${this.selectedVendors.map(id => `
                                        <td>$${Math.round(results.vendors[id].costs.implementation / 1000)}K</td>
                                    `).join('')}
                                </tr>
                                <tr>
                                    <td>Annual Operations</td>
                                    ${this.selectedVendors.map(id => `
                                        <td>$${Math.round(results.vendors[id].costs.operational / 1000)}K</td>
                                    `).join('')}
                                </tr>
                                <tr>
                                    <td>3-Year Personnel</td>
                                    ${this.selectedVendors.map(id => `
                                        <td>$${Math.round(results.vendors[id].costs.operational * 3 * 0.6 / 1000)}K</td>
                                    `).join('')}
                                </tr>
                                <tr class="total-row">
                                    <td>3-Year Total</td>
                                    ${this.selectedVendors.map(id => `
                                        <td class="${id === 'portnox' ? 'highlight' : ''}">
                                            $${Math.round(results.vendors[id].costs.threeYear / 1000)}K
                                        </td>
                                    `).join('')}
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
                
                <!-- Financial Charts -->
                <div class="charts-row">
                    <div class="chart-container glass-morphism hover-lift">
                        <h3 class="chart-title">
                            <i class="fas fa-chart-area"></i>
                            Cumulative Cost Over Time
                        </h3>
                        <div id="cumulative-cost-chart" class="chart-wrapper"></div>
                    </div>
                    
                    <div class="chart-container glass-morphism hover-lift">
                        <h3 class="chart-title">
                            <i class="fas fa-chart-bar"></i>
                            ROI Progression
                        </h3>
                        <div id="roi-progression-chart" class="chart-wrapper"></div>
                    </div>
                </div>
                
                <!-- Hidden Costs Analysis -->
                <div class="hidden-costs-section glass-morphism hover-lift">
                    <h3 class="section-title">
                        <i class="fas fa-eye-slash"></i>
                        Hidden Cost Analysis
                    </h3>
                    <div class="hidden-costs-grid">
                        <div class="cost-item">
                            <h4>Infrastructure Costs</h4>
                            <p>Portnox: <strong>$0</strong> (Cloud-native)</p>
                            <p>Traditional: <strong>$85K+</strong> (Hardware, power, cooling)</p>
                        </div>
                        <div class="cost-item">
                            <h4>Upgrade Cycles</h4>
                            <p>Portnox: <strong>Included</strong> (Continuous updates)</p>
                            <p>Traditional: <strong>$50K+</strong> every 3 years</p>
                        </div>
                        <div class="cost-item">
                            <h4>Scalability Costs</h4>
                            <p>Portnox: <strong>Linear</strong> (Pay per device)</p>
                            <p>Traditional: <strong>Step function</strong> (Hardware limits)</p>
                        </div>
                        <div class="cost-item">
                            <h4>Downtime Impact</h4>
                            <p>Portnox: <strong>$20K/year</strong> (99.99% SLA)</p>
                            <p>Traditional: <strong>$200K+/year</strong> (Maintenance windows)</p>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        // Create financial charts
        setTimeout(() => {
            this.createCumulativeCostChart();
            this.createROIProgressionChart();
        }, 100);
    }
    
    loadSecurityPosture() {
        const container = document.getElementById('security-posture-content');
        if (!container || !this.analysisResults) return;
        
        const results = this.analysisResults;
        
        container.innerHTML = `
            <div class="security-posture-layout">
                <!-- Security Score Overview -->
                <div class="security-overview glass-morphism hover-lift">
                    <h3 class="section-title">
                        <i class="fas fa-shield-alt"></i>
                        Security Posture Comparison
                    </h3>
                    <div class="security-scores-grid">
                        ${this.selectedVendors.map(vendorId => {
                            const vendor = this.vendorData[vendorId];
                            const score = vendor.security.overallSecurityScore;
                            return `
                                <div class="security-score-card ${vendorId === 'portnox' ? 'highlighted' : ''}">
                                    <div class="vendor-header">
                                        <img src="${vendor.logo}" alt="${vendor.shortName}" class="vendor-logo-small">
                                        <h4>${vendor.shortName}</h4>
                                    </div>
                                    <div class="score-visual">
                                        <div class="score-circle" data-score="${score}">
                                            <svg viewBox="0 0 200 200">
                                                <circle cx="100" cy="100" r="90" fill="none" stroke="#e0e0e0" stroke-width="20"/>
                                                <circle cx="100" cy="100" r="90" fill="none" stroke="${this.getScoreColor(score)}" 
                                                        stroke-width="20" stroke-dasharray="${score * 5.65} 565" 
                                                        transform="rotate(-90 100 100)"/>
                                            </svg>
                                            <div class="score-text">${score}</div>
                                        </div>
                                    </div>
                                    <div class="score-details">
                                        <div class="detail-item">
                                            <span>Zero Trust:</span>
                                            <strong>${vendor.security.zeroTrustScore}%</strong>
                                        </div>
                                        <div class="detail-item">
                                            <span>Risk Reduction:</span>
                                            <strong>${vendor.riskReduction?.breachProbabilityReduction || 0}%</strong>
                                        </div>
                                    </div>
                                </div>
                            `;
                        }).join('')}
                    </div>
                </div>
                
                <!-- Threat Mitigation Analysis -->
                <div class="threat-analysis glass-morphism hover-lift">
                    <h3 class="section-title">
                        <i class="fas fa-exclamation-triangle"></i>
                        Threat Mitigation Effectiveness
                    </h3>
                    <div class="threat-matrix">
                        ${Object.entries(this.riskScenarios).map(([scenarioId, scenario]) => {
                            const portnoxMitigation = results.risk[scenarioId].withNac['portnox'];
                            return `
                                <div class="threat-card">
                                    <div class="threat-header">
                                        <span class="threat-icon">${scenario.icon}</span>
                                        <h4>${scenario.name}</h4>
                                    </div>
                                    <div class="threat-metrics">
                                        <div class="metric">
                                            <label>Baseline Risk:</label>
                                            <span class="risk-value high">${(scenario.probability.baseline * 100).toFixed(0)}%</span>
                                        </div>
                                        <div class="metric">
                                            <label>With Portnox:</label>
                                            <span class="risk-value low">${(portnoxMitigation.probability * 100).toFixed(0)}%</span>
                                        </div>
                                        <div class="metric">
                                            <label>Risk Reduction:</label>
                                            <span class="risk-value positive">${portnoxMitigation.reduction.toFixed(0)}%</span>
                                        </div>
                                        <div class="metric">
                                            <label>Potential Loss Avoided:</label>
                                            <span class="risk-value">$${Math.round(scenario.impact.financial - portnoxMitigation.financialImpact) / 1000}K</span>
                                        </div>
                                    </div>
                                </div>
                            `;
                        }).join('')}
                    </div>
                </div>
                
                <!-- Security Features Comparison -->
                <div class="features-comparison glass-morphism hover-lift">
                    <h3 class="section-title">
                        <i class="fas fa-check-circle"></i>
                        Security Capabilities Matrix
                    </h3>
                    <div class="comparison-table-wrapper">
                        <table class="comparison-table">
                            <thead>
                                <tr>
                                    <th>Security Feature</th>
                                    ${this.selectedVendors.map(id => `
                                        <th>${this.vendorData[id].shortName}</th>
                                    `).join('')}
                                </tr>
                            </thead>
                            <tbody>
                                ${this.getSecurityFeatures().map(feature => `
                                    <tr>
                                        <td>${feature.name}</td>
                                        ${this.selectedVendors.map(id => {
                                            const vendor = this.vendorData[id];
                                            const hasFeature = vendor.security[feature.key];
                                            return `
                                                <td class="feature-cell">
                                                    ${hasFeature ? 
                                                        `<i class="fas fa-check-circle text-success"></i>` : 
                                                        `<i class="fas fa-times-circle text-danger"></i>`
                                                    }
                                                </td>
                                            `;
                                        }).join('')}
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                    </div>
                </div>
                
                <!-- MITRE ATT&CK Coverage -->
                <div class="mitre-coverage glass-morphism hover-lift">
                    <h3 class="section-title">
                        <i class="fas fa-chess-board"></i>
                        MITRE ATT&CK Framework Coverage
                    </h3>
                    <div class="mitre-heatmap" id="mitre-heatmap"></div>
                </div>
                
                <!-- Insurance Impact -->
                <div class="insurance-impact glass-morphism hover-lift">
                    <h3 class="section-title">
                        <i class="fas fa-umbrella"></i>
                        Cyber Insurance Impact
                    </h3>
                    <div class="insurance-grid">
                        <div class="insurance-card">
                            <h4>Premium Reduction</h4>
                            <div class="premium-comparison">
                                <div class="premium-item">
                                    <label>Current Premium:</label>
                                    <span>$${this.config.insurancePremium.toLocaleString()}</span>
                                </div>
                                <div class="premium-item">
                                    <label>With Portnox NAC:</label>
                                    <span class="positive">$${Math.round(this.config.insurancePremium * 0.72).toLocaleString()}</span>
                                </div>
                                <div class="premium-item highlight">
                                    <label>Annual Savings:</label>
                                    <span>$${Math.round(this.config.insurancePremium * 0.28).toLocaleString()}</span>
                                </div>
                            </div>
                        </div>
                        <div class="insurance-card">
                            <h4>Coverage Enhancements</h4>
                            <ul class="coverage-list">
                                <li><i class="fas fa-check"></i> Higher coverage limits</li>
                                <li><i class="fas fa-check"></i> Lower deductibles</li>
                                <li><i class="fas fa-check"></i> Broader coverage terms</li>
                                <li><i class="fas fa-check"></i> Faster claim processing</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        // Create security visualizations
        setTimeout(() => {
            this.createMitreHeatmap();
            this.animateSecurityScores();
        }, 100);
    }
    
    loadComplianceAnalysis() {
        const container = document.getElementById('compliance-analysis-content');
        if (!container || !this.analysisResults) return;
        
        const results = this.analysisResults;
        
        container.innerHTML = `
            <div class="compliance-analysis-layout">
                <!-- Compliance Overview -->
                <div class="compliance-overview glass-morphism hover-lift">
                    <h3 class="section-title">
                        <i class="fas fa-clipboard-check"></i>
                        Compliance Framework Coverage
                    </h3>
                    <div class="compliance-summary">
                        <p>Based on your selected frameworks: <strong>${this.config.complianceFrameworks.map(fw => this.complianceData[fw]?.name).join(', ')}</strong></p>
                    </div>
                    <div class="compliance-comparison-chart" id="compliance-comparison-chart"></div>
                </div>
                
                <!-- Framework Details -->
                ${this.config.complianceFrameworks.map(frameworkId => {
                    const framework = this.complianceData[frameworkId];
                    return `
                        <div class="framework-detail glass-morphism hover-lift">
                            <h3 class="section-title">
                                ${framework.icon} ${framework.name}
                            </h3>
                            <div class="framework-coverage">
                                ${this.selectedVendors.map(vendorId => {
                                    const vendor = this.vendorData[vendorId];
                                    const compliance = vendor.compliance.frameworks[frameworkId] || {};
                                    return `
                                        <div class="vendor-compliance-card ${vendorId === 'portnox' ? 'highlighted' : ''}">
                                            <h4>${vendor.shortName}</h4>
                                            <div class="compliance-metrics">
                                                <div class="metric">
                                                    <label>Coverage:</label>
                                                    <div class="progress-bar-container">
                                                        <div class="progress-bar" style="width: ${compliance.coverage || 0}%"></div>
                                                        <span class="progress-text">${compliance.coverage || 0}%</span>
                                                    </div>
                                                </div>
                                                <div class="metric">
                                                    <label>Automation:</label>
                                                    <div class="progress-bar-container">
                                                        <div class="progress-bar automation" style="width: ${compliance.automated || 0}%"></div>
                                                        <span class="progress-text">${compliance.automated || 0}%</span>
                                                    </div>
                                                </div>
                                                <div class="metric">
                                                    <label>Effort Required:</label>
                                                    <span class="effort-badge effort-${(compliance.effort || 'high').toLowerCase()}">${compliance.effort || 'High'}</span>
                                                </div>
                                            </div>
                                        </div>
                                    `;
                                }).join('')}
                            </div>
                        </div>
                    `;
                }).join('')}
                
                <!-- Automation Benefits -->
                <div class="automation-benefits glass-morphism hover-lift">
                    <h3 class="section-title">
                        <i class="fas fa-robot"></i>
                        Compliance Automation Benefits
                    </h3>
                    <div class="benefits-grid">
                        <div class="benefit-card">
                            <div class="benefit-icon"><i class="fas fa-clock"></i></div>
                            <h4>Time Savings</h4>
                            <div class="benefit-value">40+ hours/month</div>
                            <p>Automated reporting and evidence collection</p>
                        </div>
                        <div class="benefit-card">
                            <div class="benefit-icon"><i class="fas fa-exclamation-circle"></i></div>
                            <h4>Reduced Errors</h4>
                            <div class="benefit-value">95% reduction</div>
                            <p>Eliminate manual configuration mistakes</p>
                        </div>
                        <div class="benefit-card">
                            <div class="benefit-icon"><i class="fas fa-file-alt"></i></div>
                            <h4>Audit Readiness</h4>
                            <div class="benefit-value">Always ready</div>
                            <p>Real-time compliance dashboards</p>
                        </div>
                        <div class="benefit-card">
                            <div class="benefit-icon"><i class="fas fa-dollar-sign"></i></div>
                            <h4>Cost Reduction</h4>
                            <div class="benefit-value">$125K/year</div>
                            <p>Reduced audit and compliance costs</p>
                        </div>
                    </div>
                </div>
                
                <!-- Compliance Roadmap -->
                <div class="compliance-roadmap glass-morphism hover-lift">
                    <h3 class="section-title">
                        <i class="fas fa-road"></i>
                        Compliance Implementation Roadmap
                    </h3>
                    <div class="roadmap-timeline">
                        <div class="timeline-item">
                            <div class="timeline-marker">1</div>
                            <div class="timeline-content">
                                <h4>Week 1-2: Initial Assessment</h4>
                                <p>Gap analysis and current state documentation</p>
                            </div>
                        </div>
                        <div class="timeline-item">
                            <div class="timeline-marker">2</div>
                            <div class="timeline-content">
                                <h4>Week 3-4: Policy Configuration</h4>
                                <p>Implement compliance-specific policies</p>
                            </div>
                        </div>
                        <div class="timeline-item">
                            <div class="timeline-marker">3</div>
                            <div class="timeline-content">
                                <h4>Week 5-6: Testing & Validation</h4>
                                <p>Verify controls and generate reports</p>
                            </div>
                        </div>
                        <div class="timeline-item">
                            <div class="timeline-marker">4</div>
                            <div class="timeline-content">
                                <h4>Week 7-8: Full Deployment</h4>
                                <p>Production rollout and monitoring</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        // Create compliance visualizations
        setTimeout(() => {
            this.createComplianceComparisonChart();
            this.animateProgressBars();
        }, 100);
    }
    
    loadVendorComparison() {
        const container = document.getElementById('vendor-comparison-content');
        if (!container || !this.analysisResults) return;
        
        container.innerHTML = `
            <div class="vendor-comparison-layout">
                <!-- Vendor Matrix -->
                <div class="vendor-matrix glass-morphism hover-lift">
                    <h3 class="section-title">
                        <i class="fas fa-table"></i>
                        Comprehensive Vendor Comparison Matrix
                    </h3>
                    <div class="matrix-table-wrapper">
                        <table class="vendor-matrix-table">
                            <thead>
                                <tr>
                                    <th class="category-header">Category</th>
                                    <th class="metric-header">Metric</th>
                                    ${this.selectedVendors.map(id => `
                                        <th class="vendor-header ${id === 'portnox' ? 'highlighted' : ''}">
                                            <img src="${this.vendorData[id].logo}" alt="${this.vendorData[id].shortName}">
                                            <span>${this.vendorData[id].shortName}</span>
                                        </th>
                                    `).join('')}
                                </tr>
                            </thead>
                            <tbody>
                                ${this.generateVendorMatrixRows()}
                            </tbody>
                        </table>
                    </div>
                </div>
                
                <!-- Feature Comparison Radar -->
                <div class="feature-radar glass-morphism hover-lift">
                    <h3 class="section-title">
                        <i class="fas fa-chart-radar"></i>
                        Feature Capability Analysis
                    </h3>
                    <div id="feature-radar-chart" class="chart-wrapper"></div>
                </div>
                
                <!-- Vendor Strengths & Weaknesses -->
                <div class="vendor-analysis glass-morphism hover-lift">
                    <h3 class="section-title">
                        <i class="fas fa-balance-scale-right"></i>
                        Vendor Strengths & Considerations
                    </h3>
                    <div class="vendor-cards-grid">
                        ${this.selectedVendors.map(vendorId => {
                            const vendor = this.vendorData[vendorId];
                            const strengths = this.getVendorStrengths(vendorId);
                            const weaknesses = this.getVendorWeaknesses(vendorId);
                            
                            return `
                                <div class="vendor-analysis-card ${vendorId === 'portnox' ? 'recommended' : ''}">
                                    <div class="vendor-header">
                                        <img src="${vendor.logo}" alt="${vendor.shortName}">
                                        <h4>${vendor.name}</h4>
                                        ${vendorId === 'portnox' ? '<span class="recommended-badge">RECOMMENDED</span>' : ''}
                                    </div>
                                    <div class="strengths">
                                        <h5><i class="fas fa-plus-circle"></i> Strengths</h5>
                                        <ul>
                                            ${strengths.map(s => `<li>${s}</li>`).join('')}
                                        </ul>
                                    </div>
                                    <div class="weaknesses">
                                        <h5><i class="fas fa-minus-circle"></i> Considerations</h5>
                                        <ul>
                                            ${weaknesses.map(w => `<li>${w}</li>`).join('')}
                                        </ul>
                                    </div>
                                    <div class="best-for">
                                        <h5><i class="fas fa-bullseye"></i> Best For</h5>
                                        <p>${this.getVendorBestFor(vendorId)}</p>
                                    </div>
                                </div>
                            `;
                        }).join('')}
                    </div>
                </div>
                
                <!-- Market Positioning -->
                <div class="market-positioning glass-morphism hover-lift">
                    <h3 class="section-title">
                        <i class="fas fa-chart-scatter"></i>
                        Market Positioning Analysis
                    </h3>
                    <div id="market-positioning-chart" class="chart-wrapper"></div>
                </div>
            </div>
        `;
        
        // Create vendor comparison visualizations
        setTimeout(() => {
            this.createFeatureRadarChart();
            this.createMarketPositioningChart();
        }, 100);
    }
    
    loadImplementationRoadmap() {
        const container = document.getElementById('implementation-roadmap-content');
        if (!container || !this.analysisResults) return;
        
        const portnoxImplementation = this.analysisResults.implementation.find(i => i.vendor === 'Portnox');
        
        container.innerHTML = `
            <div class="implementation-roadmap-layout">
                <!-- Implementation Overview -->
                <div class="implementation-overview glass-morphism hover-lift">
                    <h3 class="section-title">
                        <i class="fas fa-project-diagram"></i>
                        Portnox Cloud Implementation Strategy
                    </h3>
                    <div class="overview-grid">
                        <div class="overview-card">
                            <div class="card-icon"><i class="fas fa-calendar-alt"></i></div>
                            <h4>Total Duration</h4>
                            <div class="card-value">${portnoxImplementation?.deploymentDays || 21} Days</div>
                            <p>From kickoff to full production</p>
                        </div>
                        <div class="overview-card">
                            <div class="card-icon"><i class="fas fa-users"></i></div>
                            <h4>Resource Requirements</h4>
                            <div class="card-value">${portnoxImplementation?.fteRequired || 0.25} FTE</div>
                            <p>Minimal IT staff involvement</p>
                        </div>
                        <div class="overview-card">
                            <div class="card-icon"><i class="fas fa-tachometer-alt"></i></div>
                            <h4>Complexity Level</h4>
                            <div class="card-value">Low</div>
                            <p>Cloud-native simplicity</p>
                        </div>
                        <div class="overview-card">
                            <div class="card-icon"><i class="fas fa-chart-line"></i></div>
                            <h4>Time to First Value</h4>
                            <div class="card-value">7 Days</div>
                            <p>Initial security improvements</p>
                        </div>
                    </div>
                </div>
                
                <!-- Detailed Timeline -->
                <div class="implementation-timeline glass-morphism hover-lift">
                    <h3 class="section-title">
                        <i class="fas fa-stream"></i>
                        Implementation Timeline
                    </h3>
                    <div class="timeline-gantt" id="implementation-gantt"></div>
                    
                    <div class="phase-details">
                        ${this.generateImplementationPhases()}
                    </div>
                </div>
                
                <!-- Prerequisites Checklist -->
                <div class="prerequisites glass-morphism hover-lift">
                    <h3 class="section-title">
                        <i class="fas fa-clipboard-list"></i>
                        Prerequisites & Preparation
                    </h3>
                    <div class="checklist-grid">
                        <div class="checklist-section">
                            <h4>Technical Requirements</h4>
                            <ul class="checklist">
                                <li><i class="fas fa-check-square"></i> Network diagram and VLAN documentation</li>
                                <li><i class="fas fa-check-square"></i> Firewall rules for cloud connectivity</li>
                                <li><i class="fas fa-check-square"></i> RADIUS/LDAP integration details</li>
                                <li><i class="fas fa-check-square"></i> Certificate authority access (if using PKI)</li>
                            </ul>
                        </div>
                        <div class="checklist-section">
                            <h4>Organizational Requirements</h4>
                            <ul class="checklist">
                                <li><i class="fas fa-check-square"></i> Executive sponsorship secured</li>
                                <li><i class="fas fa-check-square"></i> IT team briefed on project</li>
                                <li><i class="fas fa-check-square"></i> Change management process defined</li>
                                <li><i class="fas fa-check-square"></i> Communication plan prepared</li>
                            </ul>
                        </div>
                        <div class="checklist-section">
                            <h4>Policy Decisions</h4>
                            <ul class="checklist">
                                <li><i class="fas fa-check-square"></i> Access control policies defined</li>
                                <li><i class="fas fa-check-square"></i> Guest access requirements</li>
                                <li><i class="fas fa-check-square"></i> BYOD policy established</li>
                                <li><i class="fas fa-check-square"></i> Compliance requirements identified</li>
                            </ul>
                        </div>
                    </div>
                </div>
                
                <!-- Success Factors -->
                <div class="success-factors glass-morphism hover-lift">
                    <h3 class="section-title">
                        <i class="fas fa-trophy"></i>
                        Critical Success Factors
                    </h3>
                    <div class="factors-grid">
                        <div class="factor-card">
                            <div class="factor-icon"><i class="fas fa-users"></i></div>
                            <h4>Stakeholder Engagement</h4>
                            <p>Regular communication and involvement of key stakeholders throughout the implementation</p>
                        </div>
                        <div class="factor-card">
                            <div class="factor-icon"><i class="fas fa-chart-line"></i></div>
                            <h4>Phased Approach</h4>
                            <p>Start with pilot group, validate success, then expand to full organization</p>
                        </div>
                        <div class="factor-card">
                            <div class="factor-icon"><i class="fas fa-graduation-cap"></i></div>
                            <h4>Training & Adoption</h4>
                            <p>Comprehensive training for IT staff and end-user communication</p>
                        </div>
                        <div class="factor-card">
                            <div class="factor-icon"><i class="fas fa-sync-alt"></i></div>
                            <h4>Continuous Optimization</h4>
                            <p>Regular policy reviews and adjustments based on analytics</p>
                        </div>
                    </div>
                </div>
                
                <!-- Post-Implementation -->
                <div class="post-implementation glass-morphism hover-lift">
                    <h3 class="section-title">
                        <i class="fas fa-rocket"></i>
                        Post-Implementation Optimization
                    </h3>
                    <div class="optimization-timeline">
                        <div class="opt-phase">
                            <h4>Month 1-2: Stabilization</h4>
                            <ul>
                                <li>Monitor system performance</li>
                                <li>Fine-tune policies</li>
                                <li>Address user feedback</li>
                                <li>Expand device coverage</li>
                            </ul>
                        </div>
                        <div class="opt-phase">
                            <h4>Month 3-6: Enhancement</h4>
                            <ul>
                                <li>Implement advanced features</li>
                                <li>Integrate additional systems</li>
                                <li>Optimize compliance reporting</li>
                                <li>Expand automation</li>
                            </ul>
                        </div>
                        <div class="opt-phase">
                            <h4>Month 6+: Innovation</h4>
                            <ul>
                                <li>Leverage AI insights</li>
                                <li>Implement zero trust fully</li>
                                <li>Advanced threat hunting</li>
                                <li>Continuous improvement</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        // Create implementation visualizations
        setTimeout(() => {
            this.createImplementationGantt();
        }, 100);
    }
    
    loadIndustryInsights() {
        const container = document.getElementById('industry-insights-content');
        if (!container || !this.analysisResults) return;
        
        const industry = this.industryData[this.config.industry];
        
        container.innerHTML = `
            <div class="industry-insights-layout">
                <!-- Industry Overview -->
                <div class="industry-overview glass-morphism hover-lift">
                    <h3 class="section-title">
                        ${industry.icon} ${industry.name} Industry Analysis
                    </h3>
                    <div class="industry-metrics">
                        <div class="metric-card">
                            <label>Average Breach Cost</label>
                            <div class="metric-value">$${(industry.breachCost / 1000000).toFixed(1)}M</div>
                        </div>
                        <div class="metric-card">
                            <label>Risk Multiplier</label>
                            <div class="metric-value">${industry.riskMultiplier}x</div>
                        </div>
                        <div class="metric-card">
                            <label>Compliance Weight</label>
                            <div class="metric-value">${industry.complianceWeight}x</div>
                        </div>
                        <div class="metric-card">
                            <label>Downtime Impact</label>
                            <div class="metric-value">$${industry.downTimeImpact?.toLocaleString()}/hr</div>
                        </div>
                    </div>
                </div>
                
                <!-- Industry-Specific Challenges -->
                <div class="industry-challenges glass-morphism hover-lift">
                    <h3 class="section-title">
                        <i class="fas fa-exclamation-triangle"></i>
                        Industry-Specific Challenges
                    </h3>
                    <div class="challenges-grid">
                        ${industry.specificChallenges.map(challenge => `
                            <div class="challenge-card">
                                <div class="challenge-icon"><i class="fas fa-puzzle-piece"></i></div>
                                <h4>${challenge}</h4>
                                <p>${this.getChallengeSolution(challenge)}</p>
                            </div>
                        `).join('')}
                    </div>
                </div>
                
                <!-- Regulatory Requirements -->
                <div class="regulatory-requirements glass-morphism hover-lift">
                    <h3 class="section-title">
                        <i class="fas fa-gavel"></i>
                        Regulatory Compliance Requirements
                    </h3>
                    <div class="regulations-grid">
                        ${industry.regulatoryRequirements.map(reg => {
                            const compliance = this.complianceData[reg.toLowerCase().replace(/\s+/g, '-')] || {};
                            return `
                                <div class="regulation-card">
                                    <h4>${reg}</h4>
                                    <p>${compliance.description || 'Industry-specific regulation'}</p>
                                    <div class="portnox-coverage">
                                        <span class="coverage-label">Portnox Coverage:</span>
                                        <span class="coverage-value">${this.getPortnoxComplianceCoverage(reg)}%</span>
                                    </div>
                                </div>
                            `;
                        }).join('')}
                    </div>
                </div>
                
                <!-- Industry Best Practices -->
                <div class="best-practices glass-morphism hover-lift">
                    <h3 class="section-title">
                        <i class="fas fa-award"></i>
                        NAC Best Practices for ${industry.name}
                    </h3>
                    <div class="practices-list">
                        ${industry.nacPriorities.map((priority, index) => `
                            <div class="practice-item">
                                <div class="practice-number">${index + 1}</div>
                                <div class="practice-content">
                                    <h4>${priority}</h4>
                                    <p>${this.getBestPracticeDetail(priority, industry.name)}</p>
                                </div>
                            </div>
                        `).join('')}
                    </div>
                </div>
                
                <!-- Analyst Insights -->
                <div class="analyst-insights glass-morphism hover-lift">
                    <h3 class="section-title">
                        <i class="fas fa-chart-line"></i>
                        Industry Analyst Insights
                    </h3>
                    <div class="analyst-cards">
                        ${this.analystInsights.filter(insight => 
                            insight.insights.some(i => i.relevance > 85)
                        ).slice(0, 3).map(analyst => `
                            <div class="analyst-card">
                                <div class="analyst-header">
                                    <img src="${analyst.logo}" alt="${analyst.firm}" class="analyst-logo">
                                    <div class="analyst-info">
                                        <h4>${analyst.firm}</h4>
                                        <p>${analyst.report}</p>
                                    </div>
                                </div>
                                <div class="analyst-quote">
                                    <i class="fas fa-quote-left"></i>
                                    <p>${analyst.insights[0].quote}</p>
                                </div>
                            </div>
                        `).join('')}
                    </div>
                </div>
                
                <!-- Peer Comparison -->
                <div class="peer-comparison glass-morphism hover-lift">
                    <h3 class="section-title">
                        <i class="fas fa-building"></i>
                        How You Compare to ${industry.name} Peers
                    </h3>
                    <div class="comparison-metrics">
                        <div class="comparison-item">
                            <label>Device Count</label>
                            <div class="comparison-bar">
                                <div class="industry-avg" style="width: 60%">
                                    <span>Industry Avg: ${industry.avgDevices}</span>
                                </div>
                                <div class="your-value" style="left: ${(this.config.deviceCount / industry.avgDevices * 60)}%">
                                    <span>You: ${this.config.deviceCount}</span>
                                </div>
                            </div>
                        </div>
                        <div class="comparison-item">
                            <label>Security Maturity</label>
                            <div class="comparison-bar">
                                <div class="industry-avg" style="width: 45%">
                                    <span>Industry Avg: Medium</span>
                                </div>
                                <div class="your-value" style="left: 85%">
                                    <span>With Portnox: Advanced</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }
    
    // Helper methods for content generation
    getSecurityFeatures() {
        return [
            { key: 'zeroTrustScore', name: 'Zero Trust Architecture' },
            { key: 'riskAssessmentReal', name: 'Real-time Risk Assessment' },
            { key: 'automatedRemediation', name: 'Automated Remediation' },
            { key: 'threatIntelligence', name: 'Threat Intelligence' },
            { key: 'behavioralAnalytics', name: 'Behavioral Analytics' },
            { key: 'microsegmentation', name: 'Microsegmentation' },
            { key: 'dlpIntegration', name: 'DLP Integration' },
            { key: 'siemIntegration', name: 'SIEM Integration' },
            { key: 'xdrCapabilities', name: 'XDR Capabilities' },
            { key: 'forensicsCapability', name: 'Forensics Capability' }
        ];
    }
    
    getScoreColor(score) {
        if (score >= 90) return '#4CAF50';
        if (score >= 80) return '#8BC34A';
        if (score >= 70) return '#FFC107';
        if (score >= 60) return '#FF9800';
        return '#F44336';
    }
    
    generateVendorMatrixRows() {
        const categories = [
            {
                name: 'Financial',
                metrics: [
                    { key: 'tco3Year', label: '3-Year TCO', format: 'currency' },
                    { key: 'roi', label: 'ROI (%)', format: 'percentage' },
                    { key: 'paybackMonths', label: 'Payback Period', format: 'months' },
                    { key: 'perDeviceCost', label: 'Cost per Device', format: 'currency' }
                ]
            },
            {
                name: 'Operational',
                metrics: [
                    { key: 'deploymentTime', label: 'Deployment Time', format: 'days' },
                    { key: 'fteRequired', label: 'FTE Required', format: 'number' },
                    { key: 'availability', label: 'Availability', format: 'percentage' },
                    { key: 'maintenanceEffort', label: 'Maintenance Effort', format: 'text' }
                ]
            },
            {
                name: 'Security',
                metrics: [
                    { key: 'securityScore', label: 'Security Score', format: 'score' },
                    { key: 'zeroTrustScore', label: 'Zero Trust Score', format: 'score' },
                    { key: 'riskReduction', label: 'Risk Reduction', format: 'percentage' },
                    { key: 'threatResponse', label: 'Threat Response', format: 'text' }
                ]
            },
            {
                name: 'Architecture',
                metrics: [
                    { key: 'deploymentModel', label: 'Deployment Model', format: 'text' },
                    { key: 'scalability', label: 'Scalability', format: 'text' },
                    { key: 'cloudNative', label: 'Cloud Native', format: 'boolean' },
                    { key: 'globalAvailability', label: 'Global Availability', format: 'boolean' }
                ]
            }
        ];
        
        let rows = '';
        categories.forEach(category => {
            category.metrics.forEach((metric, index) => {
                rows += '<tr>';
                if (index === 0) {
                    rows += `<td rowspan="${category.metrics.length}" class="category-cell">${category.name}</td>`;
                }
                rows += `<td class="metric-cell">${metric.label}</td>`;
                
                this.selectedVendors.forEach(vendorId => {
                    const value = this.getVendorMetricValue(vendorId, metric);
                    const isWinner = this.isMetricWinner(vendorId, metric, this.selectedVendors);
                    rows += `<td class="value-cell ${isWinner ? 'winner' : ''} ${vendorId === 'portnox' ? 'portnox-cell' : ''}">${value}</td>`;
                });
                
                rows += '</tr>';
            });
        });
        
        return rows;
    }
    
    getVendorMetricValue(vendorId, metric) {
        const vendor = this.vendorData[vendorId];
        const results = this.analysisResults?.vendors[vendorId];
        
        let value;
        switch (metric.key) {
            case 'tco3Year':
                value = results?.costs.threeYear || 0;
                return '$' + Math.round(value / 1000) + 'K';
            case 'roi':
                return (results?.savings.roi || 0) + '%';
            case 'paybackMonths':
                return (results?.savings.paybackMonths || 0) + ' months';
            case 'perDeviceCost':
                value = results?.costs.perDevice || 0;
                return '$' + Math.round(value);
            case 'deploymentTime':
                return vendor.metrics.deploymentTime + ' days';
            case 'fteRequired':
                return vendor.metrics.fteRequired;
            case 'availability':
                return vendor.metrics.availability + '%';
            case 'maintenanceEffort':
                return vendor.metrics.patchingEffort || 'High';
            case 'securityScore':
                return vendor.security.overallSecurityScore + '/100';
            case 'zeroTrustScore':
                return vendor.security.zeroTrustScore + '/100';
            case 'riskReduction':
                return (vendor.riskReduction?.breachProbabilityReduction || 0) + '%';
            case 'threatResponse':
                return vendor.security.automatedRemediation ? 'Automated' : 'Manual';
            case 'deploymentModel':
                return vendor.deploymentModel;
            case 'scalability':
                return vendor.metrics.scalability || 'Limited';
            case 'cloudNative':
                return vendor.architecture.includes('Cloud') ? '?' : '?';
            case 'globalAvailability':
                return vendor.metrics.globalReach ? '?' : '?';
            default:
                return 'N/A';
        }
    }
    
    isMetricWinner(vendorId, metric, vendorList) {
        // Logic to determine if this vendor has the best value for this metric
        if (vendorId === 'portnox') {
            // Portnox wins most metrics in this scenario
            return ['tco3Year', 'roi', 'paybackMonths', 'deploymentTime', 'fteRequired', 
                   'securityScore', 'zeroTrustScore', 'riskReduction'].includes(metric.key);
        }
        return false;
    }
    
    getVendorStrengths(vendorId) {
        const strengths = {
            'portnox': [
                'Lowest TCO with 53% cost savings',
                'Fastest implementation (21 days)',
                'Highest security score (95/100)',
                'Cloud-native architecture',
                'Minimal resource requirements (0.25 FTE)',
                'Comprehensive compliance automation'
            ],
            'cisco': [
                'Market leader position',
                'Extensive feature set',
                'Large ecosystem',
                'Enterprise-grade capabilities',
                'Mature platform'
            ],
            'aruba': [
                'Good BYOD capabilities',
                'Strong wireless integration',
                'HPE ecosystem benefits',
                'Established vendor'
            ],
            'forescout': [
                'Excellent device visibility',
                'Agentless discovery',
                'OT/IoT device support',
                'Good integration options'
            ],
            'fortinet': [
                'Security fabric integration',
                'Good threat intelligence',
                'Unified management',
                'Strong firewall integration'
            ]
        };
        
        return strengths[vendorId] || ['Standard NAC capabilities'];
    }
    
    getVendorWeaknesses(vendorId) {
        const weaknesses = {
            'portnox': [
                'Newer player in market',
                'Less brand recognition vs legacy vendors'
            ],
            'cisco': [
                'High complexity and cost',
                'Requires significant expertise',
                'Long implementation time',
                'Hardware dependencies',
                'High operational overhead'
            ],
            'aruba': [
                'Limited cloud capabilities',
                'Complex licensing',
                'Hardware requirements',
                'Higher TCO'
            ],
            'forescout': [
                'Limited NAC features',
                'No cloud RADIUS',
                'Complex deployment',
                'Higher costs'
            ],
            'fortinet': [
                'Best with Fortinet stack',
                'Limited standalone value',
                'On-premises focused'
            ]
        };
        
        return weaknesses[vendorId] || ['Legacy architecture limitations'];
    }
    
    getVendorBestFor(vendorId) {
        const bestFor = {
            'portnox': 'Organizations seeking modern cloud-native NAC with lowest TCO, fastest deployment, and comprehensive security',
            'cisco': 'Large enterprises with existing Cisco infrastructure and dedicated security teams',
            'aruba': 'Organizations with HPE/Aruba wireless infrastructure seeking integrated solutions',
            'forescout': 'Environments requiring deep device visibility and OT/IoT discovery',
            'fortinet': 'Organizations with existing Fortinet security fabric deployment'
        };
        
        return bestFor[vendorId] || 'Specific use cases';
    }
    
    generateImplementationPhases() {
        return `
            <div class="phase-card">
                <div class="phase-header">
                    <div class="phase-number">1</div>
                    <h4>Planning & Design (Week 1)</h4>
                </div>
                <div class="phase-content">
                    <ul>
                        <li>Kickoff meeting and requirements gathering</li>
                        <li>Network assessment and documentation review</li>
                        <li>Policy design and approval</li>
                        <li>Integration planning</li>
                    </ul>
                </div>
            </div>
            
            <div class="phase-card">
                <div class="phase-header">
                    <div class="phase-number">2</div>
                    <h4>Initial Configuration (Week 2)</h4>
                </div>
                <div class="phase-content">
                    <ul>
                        <li>Portnox Cloud account setup</li>
                        <li>Network integration configuration</li>
                        <li>Authentication source integration (AD/LDAP)</li>
                        <li>Initial policy configuration</li>
                    </ul>
                </div>
            </div>
            
            <div class="phase-card">
                <div class="phase-header">
                    <div class="phase-number">3</div>
                    <h4>Pilot Deployment (Week 3)</h4>
                </div>
                <div class="phase-content">
                    <ul>
                        <li>Deploy to pilot group (10% of devices)</li>
                        <li>Monitor and collect feedback</li>
                        <li>Policy refinement</li>
                        <li>User communication</li>
                    </ul>
                </div>
            </div>
            
            <div class="phase-card">
                <div class="phase-header">
                    <div class="phase-number">4</div>
                    <h4>Full Rollout (Week 4)</h4>
                </div>
                <div class="phase-content">
                    <ul>
                        <li>Phased deployment to all devices</li>
                        <li>Help desk enablement</li>
                        <li>Monitoring and optimization</li>
                        <li>Documentation and handover</li>
                    </ul>
                </div>
            </div>
        `;
    }
    
    getChallengeSolution(challenge) {
        const solutions = {
            'Legacy medical equipment integration': 'Portnox provides agentless NAC with MAC authentication bypass for devices that cannot support 802.1X',
            'Complex vendor ecosystem': 'Centralized vendor access management with time-limited, audited access',
            'Life-critical system protection': 'Microsegmentation and continuous monitoring without impacting device operation',
            'BYOD medical staff requirements': 'Automated BYOD onboarding with compliance checking and certificate deployment',
            'Multi-site coordination': 'Cloud-based centralized management across all locations',
            'High-frequency trading systems': 'Ultra-low latency enforcement with no inline deployment required',
            'ATM and branch security': 'Secure segmentation of financial devices with real-time monitoring',
            'Third-party fintech integration': 'API-based access control with granular permissions',
            'Real-time fraud detection': 'Behavioral analytics and anomaly detection integration',
            'Cross-border compliance': 'Multi-region deployment with data residency controls'
        };
        
        return solutions[challenge] || 'Portnox provides flexible policies to address this challenge';
    }
    
    getBestPracticeDetail(practice, industryName) {
        const details = {
            'Medical device security': 'Implement device profiling and segmentation to isolate medical devices while maintaining clinical workflow efficiency',
            'PHI protection': 'Enforce encryption and access controls for all devices accessing patient health information',
            'Compliance automation': 'Leverage automated reporting for HIPAA, HITECH, and other healthcare regulations',
            'Vendor access': 'Implement time-limited, audited access for medical device vendors and third parties',
            'Zero trust': 'Deploy continuous verification of all devices and users accessing clinical systems',
            'Cloud integration': 'Enable secure API-based integrations with cloud services and SaaS applications',
            'API security': 'Implement OAuth and certificate-based authentication for all API access',
            'Developer access': 'Provide flexible, secure access for development environments with isolation',
            'DevOps security': 'Integrate NAC with CI/CD pipelines for automated security validation'
        };
        
        return details[practice] || `Implement ${practice} best practices specific to ${industryName}`;
    }
    
    getPortnoxComplianceCoverage(regulation) {
        const coverage = {
            'HIPAA': 94,
            'GDPR': 96,
            'PCI DSS': 96,
            'SOX': 92,
            'NIST': 98,
            'ISO 27001': 95,
            'CMMC': 93,
            'NERC CIP': 88,
            'FedRAMP': 89,
            'FISMA': 91
        };
        
        return coverage[regulation] || 90;
    }
    
    // Chart creation methods
    createTCOComparisonChart() {
        const container = document.getElementById('tco-comparison-chart');
        if (!container) return;
        
        const data = this.selectedVendors.map(vendorId => ({
            name: this.vendorData[vendorId].shortName,
            value: this.analysisResults.vendors[vendorId].costs.threeYear,
            color: this.vendorData[vendorId].color
        }));
        
        // Here you would use your preferred charting library (Highcharts, Chart.js, etc.)
        // For this example, I'll create a simple bar chart visualization
        container.innerHTML = `
            <div class="simple-bar-chart">
                ${data.map(item => `
                    <div class="bar-item">
                        <div class="bar-label">${item.name}</div>
                        <div class="bar-container">
                            <div class="bar" style="width: ${(item.value / Math.max(...data.map(d => d.value))) * 100}%; background: ${item.color}">
                                <span class="bar-value">$${Math.round(item.value / 1000)}K</span>
                            </div>
                        </div>
                    </div>
                `).join('')}
            </div>
        `;
    }
    
    createCostBreakdownChart() {
        const container = document.getElementById('cost-breakdown-chart');
        if (!container) return;
        
        const portnoxCosts = this.analysisResults.vendors['portnox'].costs;
        const breakdown = [
            { label: 'Licensing', value: portnoxCosts.licensing * 3, color: '#3498db' },
            { label: 'Implementation', value: portnoxCosts.implementation, color: '#e74c3c' },
            { label: 'Operations', value: portnoxCosts.operational * 3, color: '#f39c12' },
            { label: 'Training', value: this.vendorData['portnox'].costs.training, color: '#27ae60' }
        ];
        
        const total = breakdown.reduce((sum, item) => sum + item.value, 0);
        
        container.innerHTML = `
            <div class="pie-chart-container">
                <div class="pie-chart">
                    ${breakdown.map((item, index) => {
                        const percentage = (item.value / total * 100).toFixed(1);
                        const rotation = breakdown.slice(0, index).reduce((sum, i) => sum + (i.value / total * 360), 0);
                        return `
                            <div class="pie-slice" style="
                                transform: rotate(${rotation}deg);
                                --percentage: ${percentage}%;
                                --color: ${item.color};
                            "></div>
                        `;
                    }).join('')}
                </div>
                <div class="pie-legend">
                    ${breakdown.map(item => `
                        <div class="legend-item">
                            <span class="legend-color" style="background: ${item.color}"></span>
                            <span class="legend-label">${item.label}</span>
                            <span class="legend-value">$${Math.round(item.value / 1000)}K (${(item.value / total * 100).toFixed(1)}%)</span>
                        </div>
                    `).join('')}
                </div>
            </div>
        `;
    }
    
    createCumulativeCostChart() {
        // Implementation for cumulative cost chart
        const container = document.getElementById('cumulative-cost-chart');
        if (!container) return;
        
        // This would typically use a line chart from your charting library
        container.innerHTML = '<p>Cumulative cost visualization would be rendered here</p>';
    }
    
    createROIProgressionChart() {
        // Implementation for ROI progression chart
        const container = document.getElementById('roi-progression-chart');
        if (!container) return;
        
        container.innerHTML = '<p>ROI progression visualization would be rendered here</p>';
    }
    
    createMitreHeatmap() {
        // Implementation for MITRE ATT&CK heatmap
        const container = document.getElementById('mitre-heatmap');
        if (!container) return;
        
        container.innerHTML = '<p>MITRE ATT&CK coverage heatmap would be rendered here</p>';
    }
    
    createComplianceComparisonChart() {
        // Implementation for compliance comparison chart
        const container = document.getElementById('compliance-comparison-chart');
        if (!container) return;
        
        container.innerHTML = '<p>Compliance comparison visualization would be rendered here</p>';
    }
    
    createFeatureRadarChart() {
        // Implementation for feature radar chart
        const container = document.getElementById('feature-radar-chart');
        if (!container) return;
        
        container.innerHTML = '<p>Feature capability radar chart would be rendered here</p>';
    }
    
    createMarketPositioningChart() {
        // Implementation for market positioning chart
        const container = document.getElementById('market-positioning-chart');
        if (!container) return;
        
        container.innerHTML = '<p>Market positioning scatter plot would be rendered here</p>';
    }
    
    createImplementationGantt() {
        // Implementation for Gantt chart
        const container = document.getElementById('implementation-gantt');
        if (!container) return;
        
        container.innerHTML = '<p>Implementation Gantt chart would be rendered here</p>';
    }
    
    animateSecurityScores() {
        // Animate the circular progress indicators
        document.querySelectorAll('.score-circle').forEach(circle => {
            const score = parseInt(circle.getAttribute('data-score'));
            const circumference = 2 * Math.PI * 90;
            const offset = circumference - (score / 100 * circumference);
            
            setTimeout(() => {
                const progressCircle = circle.querySelector('circle:last-child');
                if (progressCircle) {
                    progressCircle.style.strokeDashoffset = offset;
                }
            }, 500);
        });
    }
    
    animateProgressBars() {
        document.querySelectorAll('.progress-bar').forEach(bar => {
            const width = bar.style.width;
            bar.style.width = '0';
            setTimeout(() => {
                bar.style.width = width;
                bar.style.transition = 'width 1.5s ease-out';
            }, 100);
        });
    }
    
    // Export and action methods
    exportComprehensiveReport() {
        console.log('Exporting comprehensive report...');
        // Implementation for report export
        this.showNotification('Generating comprehensive report...', 'info');
        
        // Simulate report generation
        setTimeout(() => {
            this.showNotification('Report generated successfully!', 'success');
            // Here you would trigger the actual download
        }, 2000);
    }
    
    exportExecutiveSummary() {
        console.log('Exporting executive summary...');
        this.showNotification('Generating executive summary...', 'info');
    }
    
    scheduleDemo() {
        console.log('Opening demo scheduler...');
        // Here you would open a calendar integration or form
        window.open('https://www.portnox.com/request-demo/', '_blank');
    }
    
    shareResults() {
        console.log('Sharing results...');
        // Implementation for sharing functionality
        if (navigator.share) {
            navigator.share({
                title: 'Portnox NAC Analysis Results',
                text: 'Check out my Zero Trust NAC analysis results',
                url: window.location.href
            });
        } else {
            this.showNotification('Copy link to share: ' + window.location.href, 'info');
        }
    }
    
    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `notification ${type} animate-slide-in`;
        notification.innerHTML = `
            <div class="notification-content">
                <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : 'info-circle'}"></i>
                <span>${message}</span>
            </div>
            <button class="notification-close" onclick="this.parentElement.remove()">
                <i class="fas fa-times"></i>
            </button>
        `;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.remove();
        }, 5000);
    }
    
    showErrorMessage(message) {
        const container = document.querySelector('#executive-view .view-content');
        if (container) {
            container.innerHTML = `
                <div class="error-message glass-morphism">
                    <i class="fas fa-exclamation-triangle"></i>
                    <h2>Error</h2>
                    <p>${message}</p>
                    <button onclick="location.reload()" class="action-btn primary">
                        <i class="fas fa-redo"></i> Reload
                    </button>
                </div>
            `;
        }
    }
    
    startAnimations() {
        // Add initial animation classes
        document.querySelectorAll('.animate-fade-in').forEach((el, index) => {
            setTimeout(() => {
                el.classList.add('visible');
            }, index * 100);
        });
        
        // Setup intersection observer for scroll animations
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('visible');
                }
            });
        }, { threshold: 0.1 });
        
        document.querySelectorAll('.hover-lift').forEach(el => {
            observer.observe(el);
        });
    }
    
    initializeAdvancedCharts() {
        // This method would initialize any chart libraries
        console.log('Charts would be initialized here with actual charting library');
    }
}

// Initialize the platform
document.addEventListener('DOMContentLoaded', function() {
    // Wait a moment for all resources to load
    setTimeout(() => {
        try {
            if (!window.portnoxPlatform) {
                window.portnoxPlatform = new PortnoxExecutiveIntelligencePlatform();
                
                const executiveView = document.querySelector('#executive-view');
                if (executiveView) {
                    const result = window.portnoxPlatform.init();
                    if (result) {
                        console.log("? Portnox Executive Intelligence Platform v5.0 fully loaded");
                    }
                }
            }
        } catch (error) {
            console.error("? Platform initialization failed:", error);
            // Show error in UI
            const errorFallback = document.getElementById('error-fallback');
            if (errorFallback) {
                errorFallback.style.display = 'block';
            }
        }
    }, 1000);
});

// Global error handler
window.addEventListener('error', function(event) {
    console.error('Global error caught:', event.error);
});

// Export for use if needed
if (typeof module !== 'undefined' && module.exports) {
    module.exports = PortnoxExecutiveIntelligencePlatform;
}